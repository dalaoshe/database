#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 137
#define YY_END_OF_BUFFER 138
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[942] =
    {   0,
        0,    0,    2,    2,  138,  136,    4,    4,  136,  129,
      136,  129,  129,  132,  129,  129,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,    0,  135,    1,  131,  130,
      132,  127,  126,  128,  134,  134,  134,  134,  134,  107,
      134,  134,  108,  134,  134,  134,  134,  134,  134,  134,

      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  109,  134,  110,  111,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  112,
      113,  114,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  115,  134,
      134,  134,  134,  134,  134,  134,  134,    2,    2,    2,
        2,    2,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  133,  130,   94,  134,   95,  134,  134,   96,
       97,  123,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,   98,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,   99,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  100,  134,  134,  101,  134,  134,  134,  134,  134,

      125,  134,  124,  134,  102,  134,  134,  103,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  104,
      134,  134,  134,  122,  134,  105,  134,  134,  134,  106,
      134,  134,  134,  134,  119,  134,  134,  134,  134,  134,
      134,  134,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  134,  134,  134,  134,  134,   72,  134,  116,
      134,  134,  134,  134,  134,  134,   73,  134,  134,  134,
      134,   74,  134,  134,  134,   75,  134,  134,  134,  134,
      134,   76,   77,   78,  134,  134,   79,  134,   80,  134,
      134,  134,  134,  134,  134,   81,  134,   82,   83,   84,
      134,   85,  134,  134,  134,  134,   86,  134,  134,  134,

      134,  134,   87,   88,  134,  134,  134,  134,  134,  134,
      134,   89,  134,  134,  134,  134,   90,   91,  134,  134,
      134,  134,  134,  134,  134,  134,   92,  134,  134,   93,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   54,   55,
      134,  134,  134,  134,  121,  134,  134,  134,   56,  134,
      134,  134,  134,   57,  134,  134,  134,  134,  134,  134,
      134,  134,  134,   58,  134,  134,  134,   59,   60,  134,
      134,  134,  134,   61,   62,   63,   64,  134,  134,  134,
       65,   66,  134,  134,  134,  134,  134,   67,  134,  134,
      134,  134,   68,  134,  134,  134,   69,  134,  134,  134,
       70,  134,  134,  134,   71,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  134,   30,  134,  134,   31,  134,   32,  134,
      134,  134,   33,   34,  134,   35,   36,   37,  134,   38,
      134,   39,   40,  134,   41,   42,  134,  134,   43,  134,
      134,   44,  134,  134,  134,   45,  134,   46,   47,   48,
      134,   49,  134,  134,  134,   50,   51,   52,   53,  134,

      134,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       14,   15,   16,   17,   18,  134,  134,   19,  134,   20,
       21,   22,   23,  134,   24,  134,  134,   25,   26,  134,
       27,   28,  134,  134,  134,  120,   29,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,  117,  134,   10,  134,   11,  134,
       12,  134,  134,   13,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  118,  134,    7,  134,    8,    9,
        2,    2,    2,    2,    2,    2,    5,    6,    2,    2,
        0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_uint16_t yy_base[949] =
    {   0,
        0,    0,   65,    0,  418, 3762,  129,  131,    0, 3762,
      411,  409,  405,  127,  126,  402,  123,  123,  175,  221,
      112,  123,  121,  142,  167,  115,  129,  182,  183,  222,
      227,  228,    0,  180,  273,  321,  163,  226,  223,    0,
      156,  159,  396,    0,  370,  361,  350,  156,  196,  346,
      378,  439,  491,  543,  260,  591,  275,  323,  639,  337,
      277,  378,  390,  691,  739,  791,  285,  329,  841,  893,
      941,  442,  441,  208,  352,  349, 3762, 3762,  338,  302,
      205, 3762, 3762, 3762,    0,  136,  205,  222,  273,  225,
      279,  313,    0,  279,  393,  440,  381,  309,  360,  456,

      437,  364,  421,  442,  495,  441,  440,  444,  448,  446,
      475,  486,  493,    0,  481,  526,  487,  505,  490,  514,
      538,  552,  505,  532,  540,  539,  540,  550,  562,  558,
        0,  561,  546,  552,  573,  589,  585,  576,  576,  593,
      587,  585,  606,  595,  612,  603,  625,  606,  604,  603,
      645,  624,  651,  649,  645,  643,  639,    0,  305,  305,
      289,    0,    0,  254,  250,  344,    0,    0,    0,  657,
      695,  690,  709,  700,  733,  761,  795,  730,  785,  774,
      793,  833,  828,  849,  993,  881,  882,  836,  887, 1043,
      911,  919,  927,  936,  965,  971, 1005,  990,  915,  949,

     1092, 1015, 1053, 1003, 1028, 1088, 1097, 1039, 1089, 1078,
     1111, 1127, 1130, 1145, 1151, 1140, 1156, 1146, 1181, 1184,
     1185, 1186, 1197, 1215, 1223, 1209, 1234, 1252, 1251, 1240,
     1269, 1282, 1277, 1273, 1294, 1288, 1306, 1323, 1318, 1336,
     1143, 1340, 3762,  241,    0,  661,    0,  665,  691,    0,
        0,    0,  709,  723,  737,  747,  736,  764,  787,  792,
      839,  833,    0,  957,  843,  863, 1342,  867,  899,  936,
     1009,  998, 1015, 1044, 1047, 1062, 1070, 1083,    0, 1124,
     1141, 1217, 1223, 1250, 1303, 1324, 1329, 1336, 1347, 1348,
     1351, 1362, 1343, 1352,    0, 1349, 1368, 1373, 1380, 1384,

        0, 1379, 1369, 1374,    0, 1385, 1380, 1380, 1396, 1397,
     1407, 1389, 1389, 1393, 1406, 1390, 1406, 1410, 1411,    0,
     1395, 1399, 1400,    0, 1409,    0, 1407, 1411, 1431,    0,
     1424, 1434, 1424, 1439,    0, 1430, 1431, 1450, 1432, 1436,
     1439, 1451,    0,  208, 1456, 1464, 1465, 1467, 1482, 1468,
     1470, 1480, 1486, 1501, 1498, 1510, 1531, 1522, 1534, 1540,
     1543, 1559, 1556, 1568, 1565, 1584, 1574, 1598, 1593, 1602,
     1608, 1619, 1614, 1627, 1638, 1642, 1652, 1633, 1648, 1670,
     1664, 1676, 1688, 1706, 1710, 1692, 1701, 1722, 1693, 1718,
     1724, 1746, 1747, 1752, 1750, 1760, 1758, 1764, 1801, 1786,

     1776, 1810, 1798, 1804, 1815, 1829, 1840, 1832, 1834, 1838,
     1868, 1866, 1878, 1874, 1900, 1877, 1908, 1906, 1912, 1914,
     1922, 1930, 1931, 1917, 1936, 1948, 1954, 1971, 1960, 1962,
     1976, 1990, 1984, 2019, 1979, 2005, 2008, 2036, 2020, 2030,
     2049, 2068, 1459, 1513, 1577, 1637, 1667,    0, 1706,    0,
     1721, 1754, 1768, 1777, 1802, 1820,    0, 1865, 1950, 2001,
     2037,    0, 2050, 2049, 2047,    0, 2047, 2048, 2048, 2055,
     2077,    0,    0,    0, 2078, 2067,    0, 2070,    0, 2072,
     2071, 2068, 2077, 2079, 2091,    0, 2087,    0,    0,    0,
     2084,    0, 2095, 2103, 2093, 2095,    0, 2112, 2112, 2100,

     2103, 2110,    0,    0, 2126, 2127, 2116, 2112, 2112, 2120,
     2134,    0, 2133, 2132, 2138, 2131,    0, 2128, 2146, 2137,
     2131, 2152, 2138, 2154, 2157, 2155,    0, 2145, 2162,    0,
     2166, 2177, 2167, 2178, 2172, 2176, 2211, 2181, 2209, 2212,
     2230, 2226, 2235, 2240, 2245, 2254, 2263, 2251, 2284, 2269,
     2297, 2299, 2305, 2294, 2309, 2323, 2333, 2342, 2355, 2318,
     2354, 2359, 2367, 2372, 2368, 2391, 2377, 2393, 2385, 2409,
     2421, 2422, 2431, 2396, 2439, 2437, 2445, 2447, 2470, 2475,
     2476, 2479, 2487, 2491, 2488, 2500, 2489, 2519, 2524, 2513,
     2529, 2530, 2545, 2558, 2553, 2542, 2575, 2579, 2593, 2574,

     2583, 2604, 2596, 2609, 2607, 2625, 2644, 2638, 2633, 2659,
     2648, 2681, 2650, 2684, 2673, 2678, 2689, 2692,    0,    0,
     2174, 2200, 2221, 2276,    0, 2277, 2290, 2308,    0, 2341,
     2416, 2443, 2454,    0, 2528, 2575, 2661, 2696, 2684, 2687,
     2689, 2703, 2706,    0, 2713, 2704, 2703,    0,    0, 2707,
     2724, 2713, 2725,    0,    0,    0,    0, 2737, 2732, 2722,
        0,    0, 2738, 2728, 2730, 2746, 2743,    0, 2752, 2735,
     2753, 2757, 2741, 2743, 2742, 2762,    0, 2761, 2764, 2766,
        0, 2753, 2773, 2775,    0, 2772, 2781, 2786, 2789, 2791,
     2803, 2795, 2805, 2800, 2797, 2826, 2835, 2839, 2854, 2840,

     2843, 2857, 2869, 2848, 2865, 2883, 2891, 2880, 2893, 2902,
     2908, 2917, 2932, 2941, 2923, 2931, 2942, 2947, 2966, 2975,
     2965, 2971, 2976, 2977, 3005, 3011, 3000, 2990, 2999, 3016,
     3035, 3040, 3029, 3030, 3039, 3068, 3054, 3045, 3083, 3070,
     3085, 3089, 3118, 3073, 3099, 3108, 3102, 3113, 3123, 3148,
     3156, 3127, 2926,    0, 2945, 2960, 2992, 3044,    0, 3080,
     3126, 3124,    0,    0, 3144,    0,    0,    0, 3153,    0,
     3148,    0,    0, 3138,    0,    0, 3146, 3161,    0, 3155,
     3167,    0, 3152, 3172, 3153,    0, 3179, 3164,    0,    0,
     3174,    0, 3186, 3191, 3176,    0,    0,    0,    0, 3179,

     3186, 3196, 3197, 3201, 3202, 3211, 3206, 3207, 3236, 3241,
     3215, 3245, 3247, 3271, 3255, 3259, 3260, 3270, 3273, 3295,
     3281, 3285, 3289, 3299, 3303, 3314, 3313, 3324, 3338, 3329,
     3335, 3348, 3337, 3339, 3347, 3379, 3369, 3353, 3378, 3381,
     3387, 3397, 3413, 3403, 3392, 3402, 3411, 3421, 3442, 3446,
        0,    0,    0,    0,    0, 3251, 3288,    0, 3328,    0,
        0,    0,    0, 3429,    0, 3419, 3437,    0,    0, 3428,
        0,    0, 3434, 3443, 3452,    0,    0, 3456, 3457, 3461,
     3465, 3467, 3471, 3490, 3475, 3496, 3499, 3500, 3501, 3505,
     3509, 3515, 3531, 3530, 3533, 3539, 3549, 3541, 3545, 3554,

     3555, 3573, 3579, 3583, 3483, 3555,    0, 3569,    0, 3572,
        0, 3567, 3578,    0, 3595, 3598, 3604, 3608, 3607, 3619,
     3617, 3621, 3638, 3633,    0, 3629,    0, 3629,    0,    0,
     3647, 3652, 3657, 3661, 3662, 3663,    0,    0, 3671, 3673,
     3762, 3737, 3741,  182, 3745, 3749, 3753, 3757
    } ;

static yyconst flex_int16_t yy_def[949] =
    {   0,
      941,    1,  941,    3,  941,  941,  941,  941,  942,  941,
      943,  941,  941,  941,  941,  941,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  945,
      945,  941,  946,  945,  947,  945,  945,  945,  945,  945,
      948,  948,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  941,  942,  943,  941,  941,  941,  941,
      941,  941,  941,  941,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  945,  945,  946,
      947,  945,  945,  945,  945,  945,  945,  945,  945,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  941,  941,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  945,  945,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,

      944,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  944,  944,  944,  944,  944,  944,
       52,   52,   52,   52,   52,   52,  944,  944,   52,   52,
        0,  941,  941,  941,  941,  941,  941,  941
    } ;

static yyconst flex_uint16_t yy_nxt[3828] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   33,   33,   33,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   33,   33,   33,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   44,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,

       67,   67,   67,   40,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   67,   67,   67,
       74,   74,   74,   74,   80,   81,   82,   83,   86,   92,
       87,  118,  104,  106,  110,  119,   88,  105,   89,  107,
      111,  245,  108,   90,  112,  109,   91,  159,   74,   93,
       74,   74,  113,  165,  166,   86,   92,   87,  118,  104,
      106,  110,  119,   88,  105,   89,  107,  111,  245,  108,
       90,  112,  109,   91,  114,   85,   93,   94,  151,  113,
      152,  115,  116,  153,   95,  123,  137,  117,  120,  124,

      138,   96,  121,  125,   97,   98,  167,  168,  122,   74,
       74,  114,   80,   81,   94,  151,  344,  152,  115,  116,
      153,   95,  123,  137,  117,  120,  124,  138,   96,  121,
      125,   97,   98,   99,  126,  122,  246,  100,  154,  251,
      134,  101,  156,  157,  130,  247,  155,  102,  127,  244,
      103,  135,  131,  248,  128,  129,  132,  136,  344,  133,
       99,  126,  164,  246,  100,  154,  251,  134,  101,  156,
      157,  130,  247,  155,  102,  127,  170,  103,  135,  131,
      248,  128,  129,  132,  136,  249,  133,  139,  250,  140,
      189,  170,  141,  204,  162,  190,  170,  252,  195,  142,

      143,  170,  255,  170,  196,  144,  159,   74,  343,  256,
      244,  170,  249,  170,  139,  250,  140,  189,  170,  141,
      204,  170,  190,  170,  252,  195,  142,  143,  170,  255,
      253,  196,  144,  145,  146,  197,  256,  147,  170,  170,
      170,  148,  263,  198,  254,  222,   79,  149,  170,  223,
      150,  165,  166,  170,   77,  243,  169,  253,  164,  170,
      145,  146,  197,  203,  147,  170,  170,  163,  148,  263,
      198,  254,  222,  170,  149,  162,  223,  150,  158,  158,
      170,  158,  158,  158,  158,  158,  170,  158,  158,  158,
      203,  264,  170,  171,  205,  172,  271,  261,  206,  158,

      170,  173,  208,  174,  207,  257,  209,  262,  175,  258,
      210,  176,   84,   79,  170,   78,   77,  941,  264,  941,
      171,  205,  172,  271,  261,  206,  170,  941,  173,  208,
      174,  207,  257,  209,  262,  175,  258,  210,  176,  158,
      158,  170,  158,  158,  158,  158,  158,  272,  158,  158,
      158,  941,  941,  170,  239,  177,  273,  170,  170,  941,
      241,  242,  240,  259,  278,  260,  269,  270,  265,  279,
      280,  281,  282,  266,  272,  178,  941,  170,  170,  267,
      941,  239,  177,  273,  170,  170,  268,  241,  242,  240,
      259,  278,  260,  269,  270,  265,  279,  280,  281,  282,

      266,  283,  178,  179,  170,  170,  267,  170,  288,  274,
      180,  275,  293,  268,  941,  276,  284,  181,  286,  285,
      182,  183,  277,  287,  941,  294,  295,  170,  283,  941,
      179,  296,  941,  941,  170,  288,  274,  180,  275,  293,
      301,  289,  276,  284,  181,  286,  285,  182,  183,  277,
      287,  290,  294,  295,  170,  184,  291,  292,  296,  185,
      297,  302,  298,  186,  299,  303,  300,  301,  289,  187,
      304,  305,  188,  306,  307,  308,  309,  310,  290,  170,
      941,  311,  184,  291,  292,  312,  185,  297,  302,  298,
      186,  299,  303,  300,  317,  318,  187,  304,  305,  188,

      306,  307,  308,  309,  310,  313,  170,  170,  311,  314,
      315,  191,  312,  321,  322,  316,  319,  192,  323,  324,
      193,  317,  318,  194,  320,  325,  326,  170,  941,  941,
      329,  330,  313,  941,  170,  331,  314,  315,  191,  334,
      321,  322,  316,  319,  192,  323,  324,  193,  941,  327,
      194,  320,  325,  326,  170,  170,  199,  329,  330,  341,
      328,  339,  331,  200,  201,  332,  334,  335,  333,  202,
      342,  336,  337,  170,  340,  170,  327,  443,  338,  941,
      941,  444,  170,  199,  941,  941,  341,  328,  339,  941,
      200,  201,  332,  170,  335,  333,  202,  342,  336,  337,

      170,  340,  170,  211,  443,  338,  170,  170,  444,  941,
      345,  170,  349,  941,  445,  350,  170,  212,  941,  941,
      170,  346,  941,  213,  214,  170,  170,  170,  941,  941,
      211,  170,  347,  170,  170,  446,  170,  345,  170,  349,
      348,  445,  350,  170,  212,  170,  170,  351,  346,  170,
      213,  214,  170,  170,  170,  170,  215,  447,  170,  347,
      448,  449,  446,  170,  216,  450,  170,  348,  217,  170,
      941,  218,  170,  170,  351,  170,  170,  170,  451,  352,
      941,  941,  170,  215,  447,  941,  357,  448,  449,  941,
      358,  216,  450,  170,  941,  217,  170,  170,  218,  941,

      941,  170,  170,  219,  170,  451,  352,  170,  355,  170,
      170,  170,  353,  357,  220,  356,  359,  358,  360,  452,
      221,  170,  941,  453,  170,  941,  354,  170,  170,  170,
      219,  170,  941,  941,  170,  355,  170,  170,  170,  353,
      941,  220,  356,  359,  170,  360,  452,  221,  170,  361,
      453,  454,  170,  354,  170,  224,  170,  225,  170,  362,
      226,  363,  372,  455,  170,  170,  458,  227,  228,  170,
      941,  170,  170,  229,  941,  459,  361,  170,  454,  170,
      364,  462,  224,  941,  225,  170,  362,  226,  363,  372,
      455,  170,  170,  458,  227,  228,  170,  170,  170,  170,

      229,  373,  459,  170,  170,  230,  231,  364,  462,  232,
      369,  370,  170,  233,  371,  463,  941,  170,  170,  234,
      941,  941,  235,  170,  170,  170,  941,  170,  373,  170,
      170,  170,  230,  231,  378,  170,  232,  369,  370,  941,
      233,  371,  463,  170,  170,  170,  234,  170,  379,  235,
      170,  170,  170,  380,  170,  170,  170,  170,  170,  381,
      941,  378,  170,  170,  941,  170,  236,  464,  237,  456,
      170,  238,  170,  457,  170,  379,  388,  170,  170,  170,
      380,  170,  170,  941,  170,  170,  381,  170,  941,  941,
      170,  382,  170,  236,  464,  237,  456,  383,  238,  170,

      457,  170,  941,  388,  170,  365,  170,  170,  170,  170,
      366,  941,  170,  941,  170,  386,  367,  941,  382,  170,
      387,  170,  465,  368,  383,  466,  170,  467,  170,  170,
      941,  170,  365,  170,  170,  384,  170,  366,  385,  395,
      393,  170,  386,  367,  170,  396,  170,  387,  170,  465,
      368,  170,  466,  170,  467,  170,  170,  374,  170,  375,
      468,  469,  384,  376,  170,  385,  395,  393,  170,  170,
      377,  170,  396,  394,  401,  170,  941,  941,  170,  170,
      941,  941,  170,  941,  374,  941,  375,  468,  469,  170,
      376,  170,  470,  471,  170,  941,  170,  377,  941,  472,

      394,  401,  170,  403,  170,  170,  170,  389,  170,  399,
      397,  400,  398,  170,  170,  941,  170,  390,  402,  470,
      471,  170,  391,  392,  170,  170,  472,  170,  170,  941,
      403,  170,  170,  170,  389,  170,  399,  397,  400,  398,
      170,  170,  404,  170,  390,  402,  170,  170,  473,  391,
      392,  170,  170,  406,  170,  170,  170,  407,  405,  441,
      170,  170,  170,  170,  474,  941,  170,  170,  408,  404,
      170,  409,  170,  170,  170,  473,  170,  410,  941,  170,
      406,  170,  170,  170,  407,  405,  441,  170,  170,  170,
      170,  474,  170,  170,  170,  408,  412,  170,  409,  170,

      170,  413,  170,  170,  410,  414,  170,  941,  170,  170,
      411,  415,  941,  170,  170,  417,  416,  170,  941,  170,
      170,  170,  170,  412,  170,  170,  941,  170,  413,  170,
      475,  170,  414,  170,  418,  421,  941,  411,  415,  170,
      170,  941,  417,  416,  170,  170,  419,  170,  170,  170,
      170,  170,  170,  425,  420,  476,  170,  475,  170,  170,
      170,  418,  421,  422,  423,  941,  170,  170,  170,  477,
      170,  941,  170,  419,  941,  424,  170,  170,  170,  941,
      425,  420,  476,  170,  941,  170,  170,  170,  170,  170,
      422,  423,  426,  170,  170,  170,  477,  170,  170,  941,

      430,  429,  424,  170,  170,  170,  427,  941,  432,  170,
      170,  433,  170,  170,  170,  170,  170,  428,  170,  426,
      170,  434,  170,  478,  170,  170,  431,  430,  429,  941,
      170,  170,  170,  427,  170,  432,  170,  170,  433,  435,
      170,  437,  170,  436,  428,  170,  941,  438,  434,  170,
      478,  170,  439,  431,  170,  479,  170,  170,  460,  170,
      480,  170,  481,  482,  483,  440,  435,  484,  437,  170,
      436,  442,  170,  461,  438,  487,  170,  488,  485,  439,
      489,  170,  479,  170,  490,  460,  170,  480,  486,  481,
      482,  483,  440,  491,  484,  492,  493,  494,  442,  170,

      461,  495,  487,  170,  488,  485,  496,  489,  497,  498,
      499,  490,  500,  501,  504,  486,  505,  506,  507,  502,
      491,  508,  492,  493,  494,  509,  510,  511,  495,  512,
      513,  514,  515,  496,  516,  497,  498,  499,  503,  500,
      501,  504,  517,  505,  506,  507,  502,  518,  508,  519,
      522,  523,  509,  510,  511,  524,  512,  513,  514,  515,
      520,  516,  521,  525,  526,  503,  527,  528,  529,  517,
      530,  941,  170,  941,  518,  941,  519,  522,  523,  941,
      531,  170,  524,  532,  170,  941,  170,  520,  619,  521,
      525,  526,  170,  527,  528,  529,  170,  530,  170,  170,

      170,  170,  170,  170,  170,  533,  170,  531,  170,  941,
      532,  170,  534,  170,  170,  619,  170,  170,  170,  170,
      941,  536,  170,  170,  537,  170,  170,  170,  170,  170,
      170,  170,  533,  170,  170,  535,  539,  170,  170,  534,
      941,  170,  620,  170,  170,  170,  170,  170,  536,  170,
      170,  537,  941,  170,  941,  542,  170,  941,  170,  170,
      538,  170,  535,  539,  170,  170,  540,  170,  941,  620,
      170,  541,  170,  170,  170,  170,  170,  170,  941,  170,
      544,  170,  542,  170,  545,  170,  170,  538,  546,  543,
      548,  941,  170,  540,  170,  170,  547,  170,  541,  170,

      170,  170,  170,  170,  170,  549,  170,  544,  170,  551,
      170,  545,  550,  621,  170,  546,  543,  548,  170,  170,
      170,  553,  170,  547,  170,  941,  555,  170,  170,  170,
      170,  170,  549,  552,  170,  170,  551,  170,  170,  550,
      621,  170,  941,  556,  170,  170,  554,  170,  553,  560,
      170,  170,  557,  555,  170,  170,  170,  170,  170,  941,
      552,  170,  170,  170,  170,  170,  622,  941,  170,  170,
      556,  170,  558,  554,  170,  559,  560,  170,  170,  557,
      170,  170,  170,  623,  170,  170,  170,  562,  170,  563,
      170,  170,  170,  622,  561,  170,  170,  941,  941,  558,

      170,  170,  559,  941,  170,  170,  170,  170,  170,  570,
      623,  170,  170,  170,  562,  170,  563,  170,  624,  170,
      564,  561,  170,  567,  170,  565,  170,  170,  170,  170,
      566,  170,  568,  170,  571,  170,  570,  170,  170,  170,
      572,  941,  170,  625,  170,  624,  170,  564,  569,  170,
      567,  170,  565,  170,  170,  170,  170,  566,  170,  568,
      170,  571,  573,  170,  170,  170,  170,  572,  170,  170,
      625,  941,  574,  170,  578,  569,  170,  576,  626,  575,
      170,  170,  170,  170,  579,  170,  170,  170,  170,  573,
      170,  577,  170,  170,  170,  170,  170,  627,  581,  574,

      170,  578,  170,  170,  576,  626,  575,  170,  628,  170,
      170,  579,  170,  170,  170,  170,  580,  170,  577,  170,
      170,  170,  170,  170,  627,  581,  170,  170,  582,  170,
      583,  170,  629,  630,  170,  628,  584,  170,  941,  170,
      170,  170,  941,  580,  170,  170,  170,  170,  170,  170,
      588,  170,  585,  170,  589,  582,  170,  583,  170,  629,
      630,  170,  587,  584,  170,  170,  941,  170,  170,  586,
      170,  941,  170,  170,  170,  170,  170,  588,  170,  585,
      590,  589,  170,  170,  170,  941,  941,  941,  631,  587,
      170,  592,  170,  170,  170,  170,  586,  170,  594,  591,

      941,  170,  170,  170,  170,  593,  941,  590,  596,  170,
      170,  170,  595,  170,  170,  631,  170,  170,  592,  941,
      170,  170,  598,  941,  170,  594,  591,  597,  599,  170,
      170,  170,  593,  170,  941,  596,  170,  170,  170,  595,
      170,  170,  170,  170,  170,  941,  170,  170,  170,  598,
      170,  170,  170,  170,  597,  599,  600,  170,  170,  603,
      170,  601,  602,  170,  170,  170,  170,  170,  941,  170,
      170,  170,  170,  170,  170,  170,  606,  170,  170,  170,
      170,  604,  632,  600,  170,  170,  603,  170,  601,  602,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,

      170,  607,  605,  606,  941,  170,  170,  170,  604,  632,
      610,  170,  170,  941,  170,  170,  608,  170,  609,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  607,  605,
      612,  611,  633,  170,  170,  170,  170,  610,  941,  170,
      613,  170,  170,  608,  170,  609,  170,  170,  170,  634,
      614,  170,  170,  170,  615,  170,  170,  612,  611,  633,
      941,  616,  170,  170,  635,  170,  170,  613,  170,  636,
      637,  170,  170,  170,  638,  639,  634,  614,  617,  170,
      640,  615,  170,  170,  170,  170,  641,  618,  616,  642,
      643,  635,  170,  170,  644,  645,  636,  637,  646,  170,

      647,  638,  639,  648,  170,  617,  649,  640,  650,  651,
      653,  170,  170,  641,  618,  654,  642,  643,  655,  656,
      652,  644,  645,  657,  658,  646,  659,  647,  660,  661,
      648,  170,  662,  649,  663,  650,  651,  653,  664,  665,
      666,  667,  654,  668,  669,  655,  656,  652,  670,  671,
      657,  658,  672,  659,  673,  660,  661,  674,  675,  662,
      676,  663,  677,  678,  679,  664,  665,  666,  667,  680,
      668,  669,  681,  682,  683,  670,  671,  684,  685,  672,
      941,  673,  170,  170,  674,  675,  941,  676,  690,  677,
      678,  679,  170,  170,  170,  686,  680,  170,  941,  681,

      682,  683,  170,  688,  684,  685,  687,  689,  170,  170,
      170,  753,  170,  170,  170,  690,  754,  170,  941,  170,
      170,  170,  686,  691,  170,  170,  941,  170,  170,  170,
      688,  692,  941,  687,  689,  170,  693,  755,  753,  170,
      170,  170,  170,  754,  170,  170,  170,  170,  170,  941,
      691,  170,  170,  697,  170,  170,  170,  695,  692,  694,
      941,  170,  170,  693,  755,  696,  170,  170,  941,  170,
      170,  170,  170,  170,  170,  170,  170,  698,  170,  170,
      697,  170,  700,  170,  695,  170,  694,  170,  170,  170,
      170,  756,  696,  170,  170,  699,  701,  170,  170,  170,

      170,  941,  757,  170,  698,  170,  170,  941,  170,  700,
      170,  702,  170,  170,  170,  170,  758,  170,  756,  703,
      170,  170,  699,  701,  759,  170,  170,  170,  704,  757,
      170,  941,  170,  170,  170,  170,  705,  170,  702,  170,
      170,  170,  170,  758,  941,  170,  703,  170,  170,  170,
      706,  759,  170,  760,  170,  704,  941,  170,  170,  170,
      170,  170,  170,  705,  941,  707,  170,  709,  170,  170,
      170,  170,  170,  708,  941,  170,  170,  706,  170,  710,
      760,  170,  941,  170,  170,  170,  170,  941,  170,  941,
      170,  170,  707,  170,  709,  170,  170,  170,  170,  711,

      708,  170,  170,  170,  170,  170,  710,  170,  170,  170,
      170,  170,  170,  170,  714,  170,  712,  170,  170,  713,
      170,  170,  170,  941,  941,  170,  711,  170,  170,  170,
      170,  170,  170,  941,  170,  170,  170,  170,  170,  170,
      170,  714,  761,  712,  715,  170,  713,  170,  170,  718,
      716,  717,  170,  170,  170,  170,  170,  170,  170,  170,
      719,  170,  720,  170,  170,  170,  762,  170,  941,  761,
      763,  715,  170,  170,  170,  170,  718,  716,  717,  941,
      170,  170,  170,  170,  170,  170,  170,  719,  170,  720,
      170,  170,  170,  762,  170,  723,  941,  763,  941,  722,

      170,  721,  170,  170,  170,  727,  170,  170,  170,  941,
      170,  170,  170,  170,  726,  170,  170,  724,  170,  170,
      725,  941,  723,  170,  170,  170,  722,  170,  721,  170,
      170,  170,  727,  170,  170,  170,  170,  730,  170,  170,
      170,  726,  170,  170,  724,  170,  170,  725,  728,  170,
      170,  170,  170,  729,  170,  170,  170,  731,  170,  764,
      170,  170,  170,  170,  730,  170,  170,  170,  941,  170,
      732,  734,  170,  170,  170,  728,  170,  733,  170,  941,
      729,  170,  170,  941,  731,  170,  764,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  732,  734,  738,

      765,  170,  941,  736,  733,  170,  735,  737,  170,  170,
      170,  170,  740,  941,  941,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  739,  170,  738,  765,  941,  170,
      736,  941,  170,  735,  737,  741,  170,  170,  170,  740,
      170,  170,  170,  170,  941,  170,  170,  170,  941,  170,
      170,  739,  170,  941,  170,  742,  170,  941,  743,  170,
      170,  170,  741,  744,  170,  745,  749,  170,  170,  170,
      170,  746,  170,  941,  170,  170,  170,  766,  941,  747,
      170,  170,  742,  941,  170,  743,  170,  170,  170,  170,
      744,  170,  745,  749,  170,  170,  170,  170,  746,  748,

      170,  170,  170,  750,  766,  752,  747,  170,  170,  170,
      751,  170,  767,  170,  170,  768,  170,  170,  769,  770,
      170,  170,  170,  771,  170,  170,  748,  170,  170,  772,
      750,  773,  752,  774,  775,  170,  170,  751,  776,  767,
      777,  170,  768,  778,  170,  769,  770,  170,  779,  780,
      771,  781,  170,  782,  783,  170,  772,  784,  773,  785,
      774,  775,  786,  787,  788,  776,  789,  777,  790,  791,
      778,  792,  793,  794,  795,  779,  780,  796,  781,  797,
      782,  783,  798,  799,  784,  800,  785,  801,  170,  786,
      787,  788,  941,  789,  941,  790,  791,  170,  792,  793,

      794,  795,  170,  941,  796,  803,  797,  804,  170,  798,
      799,  170,  800,  808,  801,  170,  170,  170,  805,  170,
      941,  170,  170,  802,  170,  170,  807,  170,  941,  170,
      806,  170,  803,  170,  804,  170,  170,  941,  170,  170,
      808,  170,  170,  170,  170,  805,  170,  809,  170,  170,
      802,  170,  170,  807,  170,  170,  812,  806,  170,  170,
      170,  941,  170,  170,  815,  810,  170,  941,  170,  170,
      170,  170,  941,  170,  809,  170,  170,  811,  170,  170,
      941,  816,  170,  812,  170,  170,  170,  941,  813,  170,
      170,  815,  810,  170,  814,  941,  170,  170,  170,  170,

      170,  170,  170,  170,  811,  170,  170,  170,  816,  170,
      819,  170,  170,  820,  817,  813,  170,  170,  170,  170,
      170,  814,  818,  170,  170,  821,  170,  170,  170,  170,
      941,  941,  170,  170,  170,  822,  170,  819,  170,  170,
      820,  817,  851,  170,  170,  170,  170,  170,  170,  818,
      941,  170,  821,  170,  170,  941,  170,  170,  170,  170,
      170,  823,  822,  826,  941,  170,  170,  170,  170,  851,
      852,  170,  824,  825,  170,  170,  853,  170,  170,  941,
      170,  170,  170,  170,  170,  170,  170,  170,  823,  941,
      826,  170,  170,  170,  170,  170,  827,  852,  828,  824,

      825,  170,  170,  853,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  829,  170,  170,
      170,  170,  854,  827,  941,  828,  170,  170,  170,  170,
      830,  831,  832,  170,  170,  170,  170,  941,  170,  170,
      170,  170,  170,  170,  829,  835,  170,  170,  170,  854,
      836,  170,  170,  170,  170,  170,  170,  830,  831,  832,
      839,  170,  170,  170,  833,  170,  170,  855,  170,  834,
      170,  170,  835,  170,  170,  170,  170,  836,  170,  170,
      837,  170,  170,  170,  170,  838,  170,  839,  170,  170,
      170,  833,  170,  170,  855,  840,  834,  170,  170,  170,

      841,  170,  170,  170,  170,  170,  170,  837,  170,  170,
      856,  170,  838,  170,  842,  845,  170,  170,  847,  170,
      843,  170,  840,  846,  170,  170,  170,  841,  170,  170,
      844,  170,  170,  170,  170,  170,  170,  856,  170,  170,
      857,  842,  845,  170,  170,  847,  170,  843,  170,  170,
      846,  170,  170,  848,  170,  858,  170,  844,  859,  170,
      849,  170,  170,  170,  170,  170,  170,  857,  850,  860,
      170,  170,  170,  861,  862,  863,  170,  864,  865,  866,
      848,  170,  858,  867,  170,  859,  170,  849,  868,  869,
      170,  170,  170,  870,  871,  850,  860,  872,  873,  170,

      861,  862,  863,  874,  864,  865,  866,  875,  876,  877,
      867,  170,  878,  170,  941,  868,  869,  170,  880,  170,
      870,  871,  170,  170,  872,  873,  879,  170,  941,  882,
      874,  170,  170,  170,  875,  876,  877,  170,  170,  878,
      170,  881,  170,  170,  170,  880,  885,  170,  941,  170,
      170,  170,  170,  879,  170,  884,  882,  170,  170,  170,
      170,  170,  941,  170,  170,  170,  883,  905,  881,  170,
      170,  170,  170,  885,  170,  170,  170,  170,  170,  170,
      941,  170,  884,  170,  170,  886,  887,  170,  170,  170,
      170,  170,  941,  883,  905,  170,  170,  170,  170,  170,

      906,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  886,  887,  170,  170,  170,  170,  170,  170,
      888,  170,  170,  170,  170,  889,  941,  906,  170,  891,
      170,  170,  170,  170,  170,  170,  170,  941,  170,  170,
      170,  893,  170,  890,  170,  170,  170,  888,  170,  170,
      170,  170,  889,  895,  170,  170,  891,  170,  170,  907,
      170,  892,  170,  170,  170,  170,  170,  170,  893,  170,
      890,  170,  170,  170,  170,  896,  170,  170,  170,  894,
      895,  170,  170,  170,  170,  170,  907,  170,  892,  170,
      170,  170,  170,  897,  170,  170,  170,  170,  170,  898,

      170,  170,  896,  170,  899,  170,  894,  941,  170,  900,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      897,  170,  170,  170,  170,  901,  898,  170,  170,  170,
      170,  899,  170,  170,  902,  170,  900,  170,  170,  170,
      170,  170,  170,  908,  170,  170,  170,  170,  909,  170,
      170,  941,  901,  910,  170,  170,  170,  170,  170,  911,
      170,  902,  170,  912,  170,  170,  170,  913,  914,  904,
      908,  903,  170,  170,  170,  909,  170,  170,  170,  941,
      910,  170,  170,  170,  170,  170,  911,  915,  941,  170,
      912,  170,  170,  170,  913,  914,  904,  170,  903,  170,

      170,  170,  916,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  925,  915,  170,  170,  170,  170,  170,
      170,  170,  941,  918,  170,  170,  170,  917,  170,  916,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      925,  170,  170,  170,  170,  170,  920,  170,  170,  170,
      918,  170,  170,  170,  917,  170,  941,  170,  170,  170,
      919,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  920,  170,  170,  170,  170,  170,  923,
      921,  170,  170,  922,  170,  170,  926,  919,  170,  924,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,

      927,  928,  170,  929,  170,  930,  923,  921,  170,  170,
      922,  170,  170,  926,  170,  170,  924,  170,  170,  170,
      170,  941,  170,  170,  170,  931,  170,  927,  928,  932,
      929,  170,  930,  170,  170,  170,  170,  170,  170,  933,
      170,  170,  170,  170,  170,  937,  170,  170,  934,  170,
      170,  170,  931,  170,  170,  170,  932,  935,  170,  938,
      170,  170,  170,  170,  170,  936,  933,  170,  939,  170,
      170,  170,  937,  170,  170,  934,  170,  170,  170,  170,
      170,  170,  170,  170,  935,  941,  938,  170,  170,  170,
      170,  940,  936,  170,  941,  939,  170,  170,  170,  170,

      170,  170,  941,  941,  170,  170,  170,  170,  941,  170,
      170,  941,  941,  941,  170,  170,  170,  941,  940,  941,
      170,  941,  941,  941,  170,  170,  170,  941,  941,  941,
      941,  941,  941,  941,  170,  941,  170,   75,  941,  941,
       75,   76,  941,   76,   76,  158,  941,  158,  158,  160,
      941,  160,  160,  161,  941,  161,  161,  170,  941,  170,
      170,    5,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,

      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941
    } ;

static yyconst flex_int16_t yy_chk[3828] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   14,   14,   15,   15,   17,   18,
       17,   26,   21,   22,   23,   27,   17,   21,   17,   22,
       23,   86,   22,   17,   24,   22,   17,   41,   41,   18,
       42,   42,   24,   48,   48,   17,   18,   17,   26,   21,
       22,   23,   27,   17,   21,   17,   22,   23,   86,   22,
       17,   24,   22,   17,   25,  944,   18,   19,   37,   24,
       37,   25,   25,   37,   19,   29,   34,   25,   28,   29,

       34,   19,   28,   29,   19,   19,   49,   49,   28,   74,
       74,   25,   81,   81,   19,   37,  344,   37,   25,   25,
       37,   19,   29,   34,   25,   28,   29,   34,   19,   28,
       29,   19,   19,   20,   30,   28,   87,   20,   38,   90,
       32,   20,   39,   39,   31,   88,   38,   20,   30,  244,
       20,   32,   31,   88,   30,   30,   31,   32,  165,   31,
       20,   30,  164,   87,   20,   38,   90,   32,   20,   39,
       39,   31,   88,   38,   20,   30,   55,   20,   32,   31,
       88,   30,   30,   31,   32,   89,   31,   35,   89,   35,
       55,   57,   35,   61,  161,   55,   55,   91,   57,   35,

       35,   67,   94,   55,   57,   35,  159,  159,  160,   94,
       80,   57,   89,   61,   35,   89,   35,   55,   57,   35,
       61,   67,   55,   55,   91,   57,   35,   35,   67,   94,
       92,   57,   35,   36,   36,   58,   94,   36,   57,   58,
       61,   36,   98,   58,   92,   68,   79,   36,   67,   68,
       36,  166,  166,   60,   76,   75,   50,   92,   47,   58,
       36,   36,   58,   60,   36,   68,   58,   46,   36,   98,
       58,   92,   68,   60,   36,   45,   68,   36,   51,   51,
       60,   51,   51,   51,   51,   51,   58,   51,   51,   51,
       60,   99,   68,   51,   62,   51,  102,   97,   62,   43,

       60,   51,   63,   51,   62,   95,   63,   97,   51,   95,
       63,   51,   16,   13,   62,   12,   11,    5,   99,    0,
       51,   62,   51,  102,   97,   62,   63,    0,   51,   63,
       51,   62,   95,   63,   97,   51,   95,   63,   51,   52,
       52,   62,   52,   52,   52,   52,   52,  103,   52,   52,
       52,    0,    0,   63,   72,   52,  104,   73,   72,    0,
       73,   73,   72,   96,  106,   96,  101,  101,  100,  107,
      108,  109,  110,  100,  103,   52,    0,   73,   72,  100,
        0,   72,   52,  104,   73,   72,  100,   73,   73,   72,
       96,  106,   96,  101,  101,  100,  107,  108,  109,  110,

      100,  111,   52,   53,   73,   72,  100,   53,  115,  105,
       53,  105,  117,  100,    0,  105,  112,   53,  113,  112,
       53,   53,  105,  113,    0,  118,  119,   53,  111,    0,
       53,  120,    0,    0,   53,  115,  105,   53,  105,  117,
      123,  116,  105,  112,   53,  113,  112,   53,   53,  105,
      113,  116,  118,  119,   53,   54,  116,  116,  120,   54,
      121,  124,  121,   54,  122,  125,  122,  123,  116,   54,
      126,  127,   54,  128,  129,  130,  132,  133,  116,   54,
        0,  134,   54,  116,  116,  135,   54,  121,  124,  121,
       54,  122,  125,  122,  138,  139,   54,  126,  127,   54,

      128,  129,  130,  132,  133,  136,   54,   56,  134,  136,
      137,   56,  135,  141,  142,  137,  140,   56,  143,  144,
       56,  138,  139,   56,  140,  145,  146,   56,    0,    0,
      148,  149,  136,    0,   56,  150,  136,  137,   56,  152,
      141,  142,  137,  140,   56,  143,  144,   56,    0,  147,
       56,  140,  145,  146,   56,   59,   59,  148,  149,  156,
      147,  155,  150,   59,   59,  151,  152,  153,  151,   59,
      157,  153,  154,  170,  155,   59,  147,  246,  154,    0,
        0,  248,   59,   59,    0,    0,  156,  147,  155,    0,
       59,   59,  151,  170,  153,  151,   59,  157,  153,  154,

      170,  155,   59,   64,  246,  154,  172,   64,  248,    0,
      171,  171,  174,    0,  249,  174,  174,   64,    0,    0,
      170,  172,    0,   64,   64,  173,  172,   64,    0,    0,
       64,  171,  173,  172,   64,  253,  174,  171,  171,  174,
      173,  249,  174,  174,   64,  173,  178,  175,  172,  175,
       64,   64,  173,  172,   64,   65,   65,  254,  171,  173,
      255,  256,  253,  174,   65,  257,  178,  173,   65,  175,
        0,   65,  173,  178,  175,   65,  175,  176,  258,  176,
        0,    0,   65,   65,  254,    0,  180,  255,  256,    0,
      180,   65,  257,  178,    0,   65,  175,  176,   65,    0,

        0,  179,   65,   66,  176,  258,  176,   66,  179,  181,
      180,  177,  177,  180,   66,  179,  181,  180,  181,  259,
       66,  179,    0,  260,  176,    0,  177,   66,  179,  181,
       66,  177,    0,    0,   66,  179,  181,  180,  177,  177,
        0,   66,  179,  181,  183,  181,  259,   66,  179,  182,
      260,  261,  188,  177,   66,   69,  181,   69,  177,  182,
       69,  183,  188,  262,  183,  184,  265,   69,   69,  182,
        0,  183,  188,   69,    0,  266,  182,   69,  261,  188,
      184,  268,   69,    0,   69,  184,  182,   69,  183,  188,
      262,  183,  184,  265,   69,   69,  182,  186,  187,  188,

       69,  189,  266,  189,   69,   70,   70,  184,  268,   70,
      186,  186,  184,   70,  187,  269,    0,  186,  187,   70,
        0,    0,   70,  189,  186,  187,    0,  191,  189,   70,
      189,  199,   70,   70,  191,  192,   70,  186,  186,    0,
       70,  187,  269,  193,  186,  187,   70,  191,  192,   70,
      189,  199,  194,  193,  191,  192,   70,   71,  199,  194,
        0,  191,  192,  193,    0,  200,   71,  270,   71,  264,
      193,   71,  194,  264,  191,  192,  200,   71,  199,  194,
      193,  195,  192,    0,   71,  200,  194,  196,    0,    0,
      193,  195,  200,   71,  270,   71,  264,  196,   71,  194,

      264,  195,    0,  200,   71,  185,  198,  196,  195,  185,
      185,    0,  200,    0,  196,  198,  185,    0,  195,  204,
      198,  197,  271,  185,  196,  272,  198,  273,  195,  185,
        0,  202,  185,  198,  196,  197,  185,  185,  197,  204,
      202,  197,  198,  185,  205,  205,  204,  198,  197,  271,
      185,  202,  272,  198,  273,  208,  185,  190,  202,  190,
      274,  275,  197,  190,  205,  197,  204,  202,  197,  203,
      190,  205,  205,  203,  208,  208,    0,    0,  202,  190,
        0,    0,  208,    0,  190,    0,  190,  274,  275,  203,
      190,  205,  276,  277,  210,    0,  203,  190,    0,  278,

      203,  208,  208,  210,  206,  209,  190,  201,  201,  207,
      206,  207,  206,  207,  210,    0,  203,  201,  209,  276,
      277,  210,  201,  201,  206,  209,  278,  211,  201,    0,
      210,  206,  209,  207,  201,  201,  207,  206,  207,  206,
      207,  210,  211,  212,  201,  209,  213,  211,  280,  201,
      201,  206,  209,  213,  211,  201,  216,  214,  212,  241,
      207,  214,  218,  212,  281,    0,  213,  215,  215,  211,
      212,  217,  217,  213,  211,  280,  216,  218,    0,  241,
      213,  214,  218,  216,  214,  212,  241,  215,  214,  218,
      212,  281,  217,  213,  215,  215,  220,  219,  217,  217,

      220,  221,  222,  216,  218,  221,  241,    0,  214,  218,
      219,  222,    0,  223,  215,  223,  222,  219,    0,  217,
      220,  221,  222,  220,  219,  226,    0,  220,  221,  222,
      282,  224,  221,  223,  224,  226,    0,  219,  222,  225,
      223,    0,  223,  222,  219,  226,  225,  220,  221,  222,
      227,  224,  226,  230,  225,  283,  230,  282,  224,  225,
      223,  224,  226,  227,  228,    0,  225,  229,  228,  284,
      227,    0,  226,  225,    0,  229,  230,  227,  224,    0,
      230,  225,  283,  230,    0,  231,  225,  229,  228,  234,
      227,  228,  231,  233,  229,  228,  284,  227,  232,    0,

      234,  233,  229,  230,  236,  231,  232,    0,  236,  234,
      235,  236,  231,  233,  229,  228,  234,  232,  232,  231,
      233,  237,  237,  285,  236,  232,  235,  234,  233,    0,
      235,  236,  231,  232,  239,  236,  234,  235,  236,  238,
      233,  239,  237,  238,  232,  232,    0,  239,  237,  237,
      285,  236,  240,  235,  239,  286,  242,  235,  267,  238,
      287,  239,  288,  289,  290,  240,  238,  291,  239,  237,
      238,  242,  240,  267,  239,  293,  242,  294,  292,  240,
      296,  239,  286,  242,  297,  267,  238,  287,  292,  288,
      289,  290,  240,  298,  291,  299,  300,  302,  242,  240,

      267,  303,  293,  242,  294,  292,  304,  296,  306,  307,
      308,  297,  309,  310,  312,  292,  313,  314,  315,  311,
      298,  316,  299,  300,  302,  317,  318,  319,  303,  321,
      322,  323,  325,  304,  327,  306,  307,  308,  311,  309,
      310,  312,  328,  313,  314,  315,  311,  329,  316,  331,
      333,  334,  317,  318,  319,  336,  321,  322,  323,  325,
      332,  327,  332,  337,  338,  311,  339,  340,  341,  328,
      342,    0,  345,    0,  329,    0,  331,  333,  334,    0,
      346,  347,  336,  348,  350,    0,  351,  332,  443,  332,
      337,  338,  345,  339,  340,  341,  352,  342,  349,  345,

      346,  347,  353,  348,  350,  349,  351,  346,  347,    0,
      348,  350,  353,  351,  355,  443,  352,  354,  349,  345,
        0,  355,  353,  352,  356,  349,  356,  346,  347,  353,
      348,  350,  349,  351,  355,  354,  358,  354,  358,  353,
        0,  355,  444,  352,  354,  349,  356,  357,  355,  353,
      359,  356,    0,  356,    0,  361,  360,    0,  358,  361,
      357,  355,  354,  358,  354,  358,  359,  357,    0,  444,
      359,  360,  363,  356,  357,  362,  360,  359,    0,  361,
      364,  365,  361,  360,  364,  358,  361,  357,  365,  362,
      367,    0,  363,  359,  357,  362,  366,  359,  360,  363,

      366,  365,  362,  360,  364,  367,  361,  364,  365,  369,
      367,  364,  368,  445,  368,  365,  362,  367,  370,  363,
      366,  371,  362,  366,  371,    0,  373,  366,  365,  369,
      373,  364,  367,  370,  368,  372,  369,  367,  370,  368,
      445,  368,    0,  374,  371,  370,  372,  366,  371,  378,
      373,  371,  375,  373,  375,  372,  369,  373,  376,    0,
      370,  368,  372,  374,  379,  370,  446,    0,  377,  378,
      374,  371,  376,  372,  375,  377,  378,  373,  376,  375,
      381,  375,  372,  447,  379,  376,  380,  381,  377,  382,
      374,  379,  382,  446,  380,  377,  378,    0,    0,  376,

      381,  375,  377,    0,  383,  376,  380,  381,  386,  389,
      447,  379,  382,  380,  381,  377,  382,  387,  449,  382,
      383,  380,  384,  386,  383,  384,  385,  381,  386,  389,
      385,  383,  387,  380,  390,  386,  389,  387,  388,  382,
      391,    0,  384,  451,  387,  449,  385,  383,  388,  384,
      386,  383,  384,  385,  390,  386,  389,  385,  388,  387,
      391,  390,  392,  393,  387,  388,  395,  391,  394,  384,
      451,    0,  392,  385,  397,  388,  396,  394,  452,  393,
      398,  390,  392,  393,  398,  388,  395,  391,  394,  392,
      393,  396,  401,  395,  397,  394,  396,  453,  400,  392,

      398,  397,  400,  396,  394,  452,  393,  398,  454,  392,
      393,  398,  401,  395,  403,  394,  399,  399,  396,  401,
      404,  397,  400,  396,  453,  400,  402,  398,  402,  400,
      403,  405,  455,  456,  403,  454,  404,  399,    0,  401,
      404,  403,    0,  399,  399,  406,  402,  404,  408,  400,
      409,  405,  406,  402,  410,  402,  407,  403,  405,  455,
      456,  403,  408,  404,  399,  406,    0,  404,  408,  407,
      409,    0,  406,  402,  410,  408,  407,  409,  405,  406,
      411,  410,  412,  407,  411,    0,    0,    0,  458,  408,
      414,  412,  406,  416,  413,  408,  407,  409,  414,  411,

        0,  410,  412,  407,  411,  413,    0,  411,  416,  412,
      414,  411,  415,  416,  413,  458,  415,  414,  412,    0,
      416,  413,  418,    0,  417,  414,  411,  417,  419,  412,
      420,  411,  413,  424,    0,  416,  415,  414,  421,  415,
      416,  413,  418,  415,  417,    0,  422,  423,  419,  418,
      420,  417,  425,  424,  417,  419,  421,  420,  421,  425,
      424,  422,  423,  415,  426,  421,  422,  423,    0,  418,
      427,  417,  425,  422,  423,  419,  429,  420,  430,  425,
      424,  427,  459,  421,  426,  421,  425,  428,  422,  423,
      427,  426,  431,  422,  423,  435,  429,  427,  430,  425,

      433,  431,  428,  429,    0,  430,  432,  428,  427,  459,
      433,  426,  431,    0,  428,  435,  432,  427,  432,  431,
      433,  436,  435,  429,  437,  430,  432,  433,  431,  428,
      436,  434,  460,  432,  428,  434,  439,  433,    0,  431,
      437,  436,  435,  432,  437,  432,  440,  433,  436,  461,
      438,  437,  438,  432,  439,  434,  439,  436,  434,  460,
        0,  440,  434,  439,  463,  441,  440,  437,  436,  464,
      465,  437,  438,  440,  467,  468,  461,  438,  441,  438,
      469,  439,  434,  439,  442,  441,  470,  442,  440,  471,
      475,  463,  441,  440,  476,  478,  464,  465,  480,  438,

      481,  467,  468,  482,  442,  441,  483,  469,  484,  485,
      487,  442,  441,  470,  442,  491,  471,  475,  493,  494,
      485,  476,  478,  495,  496,  480,  498,  481,  499,  500,
      482,  442,  501,  483,  502,  484,  485,  487,  505,  506,
      507,  508,  491,  509,  510,  493,  494,  485,  511,  513,
      495,  496,  514,  498,  515,  499,  500,  516,  518,  501,
      519,  502,  520,  521,  522,  505,  506,  507,  508,  523,
      509,  510,  524,  525,  526,  511,  513,  528,  529,  514,
        0,  515,  531,  533,  516,  518,    0,  519,  535,  520,
      521,  522,  536,  532,  534,  531,  523,  538,    0,  524,

      525,  526,  531,  533,  528,  529,  532,  534,  535,  531,
      533,  621,  536,  532,  534,  535,  622,  538,    0,  536,
      532,  534,  531,  537,  538,  539,    0,  537,  540,  531,
      533,  539,    0,  532,  534,  535,  540,  623,  621,  536,
      532,  534,  542,  622,  538,  539,  541,  537,  540,    0,
      537,  543,  539,  544,  537,  540,  544,  542,  539,  541,
        0,  545,  542,  540,  623,  543,  541,  548,    0,  542,
      546,  543,  539,  541,  537,  540,  544,  546,  543,  547,
      544,  545,  548,  544,  542,  550,  541,  548,  545,  542,
      546,  624,  543,  541,  548,  547,  549,  546,  543,  547,

      549,    0,  626,  544,  546,  550,  547,    0,  545,  548,
      554,  551,  550,  551,  548,  552,  627,  546,  624,  552,
      549,  553,  547,  549,  628,  555,  547,  549,  553,  626,
      554,    0,  550,  551,  560,  552,  555,  554,  551,  556,
      551,  553,  552,  627,    0,  555,  552,  549,  553,  557,
      556,  628,  555,  630,  560,  553,    0,  554,  558,  556,
      551,  560,  552,  555,    0,  557,  556,  559,  553,  557,
      561,  559,  555,  558,    0,  562,  557,  556,  558,  563,
      630,  560,    0,  563,  565,  558,  556,    0,  564,    0,
      561,  559,  557,  567,  559,  562,  557,  561,  559,  564,

      558,  569,  562,  563,  565,  558,  563,  566,  564,  568,
      563,  565,  574,  567,  569,  564,  566,  561,  559,  568,
      567,  569,  562,    0,    0,  570,  564,  566,  569,  568,
      563,  565,  574,    0,  566,  564,  568,  571,  572,  574,
      567,  569,  631,  566,  570,  570,  568,  573,  569,  573,
      571,  572,  570,  576,  566,  575,  568,  571,  572,  574,
      573,  577,  575,  578,  571,  572,  632,  573,    0,  631,
      633,  570,  570,  576,  573,  575,  573,  571,  572,    0,
      576,  577,  575,  578,  571,  572,  579,  573,  577,  575,
      578,  580,  581,  632,  573,  582,    0,  633,    0,  581,

      576,  579,  575,  583,  585,  587,  579,  584,  577,    0,
      578,  580,  581,  579,  586,  582,  586,  583,  580,  581,
      584,    0,  582,  583,  585,  587,  581,  584,  579,  590,
      583,  585,  587,  579,  584,  588,  586,  590,  580,  581,
      589,  586,  582,  586,  583,  591,  592,  584,  588,  590,
      583,  585,  587,  589,  584,  588,  590,  593,  596,  635,
      589,  593,  588,  586,  590,  591,  592,  589,    0,  595,
      594,  596,  591,  592,  594,  588,  590,  595,  596,    0,
      589,  593,  588,    0,  593,  596,  635,  589,  593,  595,
      600,  597,  591,  592,  594,  598,  595,  594,  596,  601,

      636,  594,    0,  598,  595,  596,  597,  599,  593,  599,
      600,  597,  603,    0,    0,  598,  595,  600,  597,  601,
      602,  594,  598,  605,  602,  604,  601,  636,    0,  599,
      598,    0,  603,  597,  599,  604,  599,  600,  597,  603,
      602,  606,  598,  605,    0,  604,  601,  602,    0,  609,
      605,  602,  604,    0,  608,  606,  599,    0,  607,  603,
      607,  606,  604,  608,  611,  609,  613,  602,  606,  609,
      605,  610,  604,    0,  608,  610,  609,  637,    0,  611,
      607,  608,  606,    0,  611,  607,  613,  607,  606,  615,
      608,  611,  609,  613,  616,  610,  609,  612,  610,  612,

      614,  608,  610,  614,  637,  617,  611,  607,  618,  615,
      616,  611,  638,  613,  616,  639,  615,  612,  640,  641,
      614,  616,  610,  642,  612,  617,  612,  614,  618,  643,
      614,  645,  617,  646,  647,  618,  615,  616,  650,  638,
      651,  616,  639,  652,  612,  640,  641,  614,  653,  658,
      642,  659,  617,  660,  663,  618,  643,  664,  645,  665,
      646,  647,  666,  667,  669,  650,  670,  651,  671,  672,
      652,  673,  674,  675,  676,  653,  658,  678,  659,  679,
      660,  663,  680,  682,  664,  683,  665,  684,  686,  666,
      667,  669,    0,  670,    0,  671,  672,  687,  673,  674,

      675,  676,  688,    0,  678,  689,  679,  690,  686,  680,
      682,  692,  683,  695,  684,  686,  694,  687,  691,  691,
        0,  693,  688,  688,  687,  689,  694,  690,    0,  688,
      693,  692,  689,  695,  690,  686,  694,    0,  692,  691,
      695,  693,  696,  694,  687,  691,  691,  697,  693,  688,
      688,  697,  689,  694,  690,  698,  700,  693,  692,  701,
      695,    0,  696,  694,  704,  698,  691,    0,  693,  696,
      699,  697,    0,  702,  697,  698,  700,  699,  697,  701,
        0,  705,  698,  700,  704,  703,  701,    0,  702,  696,
      699,  704,  698,  702,  703,    0,  708,  699,  697,  706,

      702,  705,  698,  700,  699,  703,  701,  707,  705,  709,
      708,  704,  703,  709,  706,  702,  708,  699,  710,  706,
      702,  703,  707,  708,  711,  710,  706,  707,  705,  709,
        0,    0,  703,  712,  707,  712,  709,  708,  710,  715,
      709,  706,  753,  708,  711,  710,  706,  716,  713,  707,
        0,  711,  710,  712,  707,    0,  709,  714,  717,  715,
      712,  713,  712,  718,    0,  710,  715,  716,  713,  753,
      755,  711,  714,  717,  716,  713,  756,  714,  717,    0,
      712,  721,  719,  718,  714,  717,  715,  722,  713,    0,
      718,  720,  723,  724,  716,  713,  719,  755,  720,  714,

      717,  721,  719,  756,  714,  717,  728,  722,  721,  719,
      718,  720,  723,  724,  722,  729,  727,  725,  720,  723,
      724,  725,  757,  719,    0,  720,  728,  726,  721,  719,
      726,  727,  730,  728,  722,  729,  727,    0,  720,  723,
      724,  725,  729,  727,  725,  733,  734,  726,  725,  757,
      734,  731,  730,  728,  726,  735,  732,  726,  727,  730,
      738,  738,  729,  727,  731,  733,  734,  758,  725,  732,
      737,  731,  733,  734,  726,  735,  732,  734,  731,  730,
      736,  738,  735,  732,  736,  737,  740,  738,  738,  744,
      737,  731,  733,  734,  758,  739,  732,  737,  731,  739,

      740,  741,  735,  732,  736,  742,  740,  736,  738,  744,
      760,  736,  737,  740,  741,  745,  744,  737,  747,  739,
      742,  741,  739,  746,  746,  742,  739,  740,  741,  748,
      743,  736,  742,  740,  743,  745,  744,  760,  747,  749,
      761,  741,  745,  752,  746,  747,  739,  742,  741,  748,
      746,  746,  742,  749,  743,  762,  748,  743,  765,  749,
      750,  743,  745,  752,  750,  747,  749,  761,  751,  769,
      752,  746,  751,  771,  774,  777,  748,  778,  780,  781,
      749,  743,  762,  783,  750,  765,  749,  750,  784,  785,
      752,  750,  751,  787,  788,  751,  769,  791,  793,  751,

      771,  774,  777,  794,  778,  780,  781,  795,  800,  801,
      783,  750,  802,  803,    0,  784,  785,  804,  805,  751,
      787,  788,  807,  808,  791,  793,  804,  806,    0,  807,
      794,  811,  802,  803,  795,  800,  801,  804,  805,  802,
      803,  806,  807,  808,  804,  805,  811,  806,    0,  807,
      808,  811,  809,  804,  806,  810,  807,  810,  811,  802,
      803,  812,    0,  813,  804,  805,  809,  856,  806,  807,
      808,  815,  809,  811,  806,  816,  817,  810,  811,  809,
        0,  812,  810,  813,  810,  814,  818,  814,  812,  819,
      813,  815,    0,  809,  856,  816,  817,  821,  815,  809,

      857,  822,  816,  817,  810,  823,  818,  814,  812,  819,
      813,  820,  814,  818,  814,  824,  819,  821,  815,  825,
      820,  822,  816,  817,  821,  823,    0,  857,  822,  827,
      826,  820,  823,  818,  814,  824,  819,    0,  820,  825,
      828,  830,  824,  826,  821,  830,  825,  820,  822,  827,
      826,  831,  823,  833,  829,  834,  827,  826,  820,  859,
      828,  829,  824,  835,  832,  830,  825,  828,  830,  838,
      826,  831,  830,  833,  829,  834,  827,  826,  831,  832,
      833,  829,  834,  835,  832,  837,  859,  828,  829,  838,
      835,  832,  830,  836,  839,  836,  838,  840,  831,  837,

      833,  829,  834,  841,  840,  837,  832,    0,  845,  842,
      835,  832,  837,  842,  839,  836,  838,  840,  846,  844,
      836,  839,  836,  841,  840,  843,  837,  847,  845,  843,
      841,  840,  837,  842,  844,  845,  842,  848,  846,  844,
      842,  839,  836,  864,  840,  846,  844,  847,  866,  843,
      841,    0,  843,  867,  847,  845,  843,  848,  849,  870,
      842,  844,  850,  873,  848,  846,  844,  874,  875,  850,
      864,  849,  878,  879,  847,  866,  843,  880,  849,    0,
      867,  881,  850,  882,  848,  849,  870,  883,    0,  850,
      873,  885,  878,  879,  874,  875,  850,  880,  849,  878,

      879,  881,  884,  882,  880,  849,  884,  883,  881,  850,
      882,  885,  886,  905,  883,  887,  888,  889,  885,  878,
      879,  890,    0,  891,  880,  891,  884,  886,  881,  884,
      882,  892,  886,  884,  883,  887,  888,  889,  885,  886,
      905,  890,  887,  888,  889,  891,  894,  893,  890,  895,
      891,  892,  891,  884,  886,  896,    0,  898,  892,  886,
      893,  899,  887,  888,  889,  897,  894,  893,  890,  895,
      900,  901,  891,  894,  893,  896,  895,  898,  892,  901,
      897,  899,  896,  900,  898,  897,  906,  893,  899,  902,
      900,  901,  897,  894,  893,  903,  895,  900,  901,  904,

      908,  910,  896,  912,  898,  913,  901,  897,  899,  902,
      900,  915,  897,  906,  916,  903,  902,  900,  901,  904,
      917,    0,  903,  919,  918,  915,  904,  908,  910,  916,
      912,  915,  913,  921,  916,  920,  902,  922,  915,  918,
      917,  916,  903,  919,  918,  926,  904,  917,  920,  924,
      919,  918,  915,  921,  923,  920,  916,  922,  915,  928,
      921,  916,  920,  931,  922,  923,  918,  917,  932,  924,
      919,  918,  926,  933,  923,  920,  924,  934,  935,  936,
      921,  923,  920,  931,  922,    0,  928,  939,  932,  940,
      931,  934,  923,  933,    0,  932,  924,  934,  935,  936,

      933,  923,    0,    0,  934,  935,  936,  939,    0,  940,
      931,    0,    0,    0,  939,  932,  940,    0,  934,    0,
      933,    0,    0,    0,  934,  935,  936,    0,    0,    0,
        0,    0,    0,    0,  939,    0,  940,  942,    0,    0,
      942,  943,    0,  943,  943,  945,    0,  945,  945,  946,
        0,  946,  946,  947,    0,  947,  947,  948,    0,  948,
      948,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,

      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1628 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * _out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int _line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	{
#line 51 "flex_lexer.l"


#line 1915 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 942 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 941 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(DATABASES)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(CHECK)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(SUM)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(AVG)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(MIN)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(MAX)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 130:
#line 193 "flex_lexer.l"
case 131:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2669 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 942 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 942 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 941);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void hsql_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 224 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

