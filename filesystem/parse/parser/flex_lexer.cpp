#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 137
#define YY_END_OF_BUFFER 138
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[946] =
    {   0,
        0,    0,    2,    2,  138,  136,    4,    4,  136,  129,
      136,  129,  129,  132,  129,  129,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,    0,  135,    0,    1,  131,
      130,  132,  127,  126,  128,  134,  134,  134,  134,  134,
      107,  134,  134,  108,  134,  134,  134,  134,  134,  134,

      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  109,  134,  110,  111,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      112,  113,  114,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  115,
      134,  134,  134,  134,  134,  134,  134,  134,    2,    2,
        2,    2,    2,    2,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  133,  135,  130,   94,  134,   95,
      134,  134,   96,   97,  123,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,   98,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,   99,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  100,  134,  134,  101,  134,  134,

      134,  134,  134,  125,  134,  124,  134,  102,  134,  134,
      103,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  104,  134,  134,  134,  122,  134,  105,  134,
      134,  134,  106,  134,  134,  134,  134,  119,  134,  134,
      134,  134,  134,  134,  134,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  134,  134,  134,  134,
      134,   72,  134,  116,  134,  134,  134,  134,  134,  134,
       73,  134,  134,  134,  134,   74,  134,  134,  134,   75,
      134,  134,  134,  134,  134,   76,   77,   78,  134,  134,
       79,  134,   80,  134,  134,  134,  134,  134,  134,   81,
      134,   82,   83,   84,  134,   85,  134,  134,  134,  134,

       86,  134,  134,  134,  134,  134,   87,   88,  134,  134,
      134,  134,  134,  134,  134,   89,  134,  134,  134,  134,
       90,   91,  134,  134,  134,  134,  134,  134,  134,  134,
       92,  134,  134,   93,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   54,   55,  134,  134,  134,  134,  121,  134,
      134,  134,   56,  134,  134,  134,  134,   57,  134,  134,
      134,  134,  134,  134,  134,  134,  134,   58,  134,  134,
      134,   59,   60,  134,  134,  134,  134,   61,   62,   63,
       64,  134,  134,  134,   65,   66,  134,  134,  134,  134,
      134,   67,  134,  134,  134,  134,   68,  134,  134,  134,
       69,  134,  134,  134,   70,  134,  134,  134,   71,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  134,   30,  134,  134,
       31,  134,   32,  134,  134,  134,   33,   34,  134,   35,
       36,   37,  134,   38,  134,   39,   40,  134,   41,   42,
      134,  134,   43,  134,  134,   44,  134,  134,  134,   45,
      134,   46,   47,   48,  134,   49,  134,  134,  134,   50,

       51,   52,   53,  134,  134,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   14,   15,   16,   17,   18,  134,
      134,   19,  134,   20,   21,   22,   23,  134,   24,  134,
      134,   25,   26,  134,   27,   28,  134,  134,  134,  120,
       29,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,  117,  134,
       10,  134,   11,  134,   12,  134,  134,   13,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  118,  134,
        7,  134,    8,    9,    2,    2,    2,    2,    2,    2,
        5,    6,    2,    2,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,   39,    1,    5,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[67] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4
    } ;

static yyconst flex_uint16_t yy_base[953] =
    {   0,
        0,    0,   66,    0,  374, 3809,  131,  133,    0, 3809,
      131,  357,  329,  130,  129,  323,  155,  127,  205,  252,
      116,  127,  125,  146,  180,  119,  133,  195,  202,  197,
      244,  242,    0,  145,  296,  345,  137,  200,  208,    0,
      140,  200,  326,    0,  145,  285,  252,  259,  264,  234,
      403,  465,  518,  571,  272,  620,  254,  305,  669,  298,
      303,  328,  375,  722,  771,  824,  352,  381,  875,  928,
      977,  415,  464,  278,  238,  198, 3809,  248, 3809,  218,
      199,  277, 3809, 3809, 3809,    0,  153,  188,  399,  409,
      289,  309,  460,    0,  347,  466,  409,  441,  299,  335,

      501,  457,  456,  463,  478,  522,  470,  465,  471,  475,
      473,  478,  510,  520,    0,  480,  559,  498,  513,  503,
      536,  564,  580,  522,  551,  568,  564,  565,  575,  587,
      584,    0,  588,  573,  576,  594,  593,  613,  612,  620,
      619,  618,  616,  635,  624,  638,  630,  663,  630,  628,
      628,  669,  647,  675,  673,  687,  653,  669,    0,  293,
      196,  282,    0,  308,    0,  152,  149,  371,    0,    0,
        0,  693,  696,  720,  754,  731,  775,  786,  810,  709,
      821,  785,  861,  826,  860,  851, 1030,  902,  911,  926,
      892, 1081,  961,  962,  973,  972,  984, 1008, 1035, 1062,

      917,  967, 1131, 1066, 1013, 1040, 1069, 1116, 1095, 1106,
     1128, 1157, 1127, 1163, 1160, 1190, 1192, 1161, 1197, 1187,
     1203, 1226, 1228, 1227, 1237, 1258, 1272, 1242, 1253, 1288,
     1263, 1298, 1297, 1302, 1319, 1313, 1328, 1353, 1343, 1354,
     1377, 1379, 1375, 1378, 3809,  321,  147,    0,  691,    0,
      725,  727,    0,    0,    0,  726,  731,  758,  778,  777,
      796,  801,  812,  833,  862,    0, 1387,  875,  897,  942,
      909,  971, 1008, 1032, 1028, 1078, 1084, 1107, 1097, 1130,
     1171,    0, 1164, 1194, 1252, 1252, 1300, 1305, 1319, 1325,
     1356, 1380, 1389, 1396, 1400, 1388, 1400,    0, 1398, 1414,

     1412, 1420, 1426,    0, 1427, 1414, 1415,    0, 1426, 1421,
     1421, 1436, 1439, 1450, 1431, 1432, 1437, 1452, 1434, 1448,
     1452, 1453,    0, 1436, 1440, 1441,    0, 1453,    0, 1455,
     1454, 1470,    0, 1463, 1475, 1465, 1482,    0, 1477, 1473,
     1492, 1473, 1477, 1482, 1493,    0,  435,  144, 1501, 1502,
     1505, 1507, 1531, 1508, 1512, 1526, 1537, 1543, 1562, 1544,
     1567, 1578, 1568, 1594, 1603, 1593, 1600, 1605, 1632, 1634,
     1644, 1645, 1618, 1655, 1677, 1668, 1661, 1656, 1701, 1686,
     1710, 1691, 1695, 1712, 1724, 1736, 1726, 1747, 1737, 1751,
     1753, 1777, 1735, 1762, 1780, 1792, 1791, 1789, 1786, 1803,

     1793, 1829, 1843, 1836, 1824, 1845, 1838, 1867, 1848, 1874,
     1879, 1890, 1869, 1878, 1916, 1905, 1919, 1921, 1928, 1935,
     1934, 1923, 1946, 1960, 1961, 1970, 1972, 1973, 1977, 1975,
     1991, 2014, 1996, 2017, 2026, 2028, 2031, 2047, 2032, 2061,
     2072, 2084, 2073, 2087, 2077, 2083, 1498, 1532, 1538, 1570,
     1619,    0, 1654,    0, 1684, 1686, 1763, 1773, 1808, 1830,
        0, 1873, 1869, 1984, 2026,    0, 2038, 2074, 2078,    0,
     2083, 2085, 2083, 2093, 2121,    0,    0,    0, 2127, 2115,
        0, 2119,    0, 2119, 2120, 2115, 2124, 2125, 2137,    0,
     2133,    0,    0,    0, 2126,    0, 2135, 2143, 2130, 2133,

        0, 2149, 2148, 2136, 2139, 2145,    0,    0, 2159, 2162,
     2151, 2147, 2148, 2156, 2175,    0, 2179, 2178, 2184, 2175,
        0, 2175, 2192, 2184, 2178, 2199, 2181, 2195, 2198, 2196,
        0, 2184, 2202,    0, 2216, 2219, 2214, 2220, 2215, 2231,
     2245, 2238, 2250, 2272, 2274, 2275, 2271, 2304, 2277, 2307,
     2310, 2316, 2321, 2328, 2353, 2343, 2350, 2340, 2366, 2372,
     2387, 2382, 2384, 2389, 2393, 2396, 2399, 2418, 2406, 2433,
     2428, 2439, 2445, 2443, 2455, 2469, 2472, 2460, 2494, 2478,
     2479, 2484, 2515, 2505, 2511, 2516, 2534, 2537, 2521, 2540,
     2547, 2561, 2570, 2571, 2552, 2573, 2596, 2608, 2586, 2597,

     2615, 2629, 2633, 2626, 2627, 2648, 2642, 2669, 2664, 2671,
     2688, 2673, 2667, 2698, 2705, 2704, 2703, 2727, 2709, 2740,
     2739, 2741,    0,    0, 2188, 2253, 2254, 2256,    0, 2297,
     2299, 2311,    0, 2337, 2336, 2355, 2422,    0, 2421, 2486,
     2528, 2577, 2569, 2598, 2609, 2646, 2665,    0, 2733, 2725,
     2727,    0,    0, 2728, 2744, 2731, 2742,    0,    0,    0,
        0, 2754, 2751, 2747,    0,    0, 2764, 2752, 2761, 2776,
     2775,    0, 2784, 2766, 2784, 2789, 2772, 2778, 2779, 2799,
        0, 2796, 2798, 2798,    0, 2785, 2804, 2805,    0, 2810,
     2812, 2815, 2817, 2821, 2834, 2831, 2846, 2847, 2848, 2850,

     2877, 2871, 2880, 2884, 2886, 2902, 2907, 2890, 2893, 2911,
     2933, 2923, 2936, 2942, 2946, 2958, 2967, 2982, 2963, 2972,
     2989, 2973, 2985, 2996, 2998, 3014, 3019, 3023, 3040, 3035,
     3041, 3029, 3045, 3050, 3059, 3081, 3054, 3076, 3075, 3090,
     3091, 3113, 3125, 3116, 3115, 3127, 3152, 3126, 3131, 3166,
     3157, 3162, 3167, 3188, 3201, 3171, 2816,    0, 2883, 2924,
     2915, 2940,    0, 2965, 3094, 3117,    0,    0, 3152,    0,
        0,    0, 3168,    0, 3174,    0,    0, 3169,    0,    0,
     3179, 3198,    0, 3195, 3207,    0, 3189, 3206, 3187,    0,
     3215, 3204,    0,    0, 3215,    0, 3227, 3228, 3212,    0,

        0,    0,    0, 3215, 3226, 3237, 3238, 3239, 3240, 3263,
     3262, 3244, 3275, 3273, 3294, 3278, 3280, 3304, 3307, 3313,
     3316, 3318, 3319, 3320, 3325, 3331, 3334, 3343, 3349, 3365,
     3356, 3360, 3374, 3387, 3370, 3399, 3372, 3375, 3396, 3412,
     3417, 3401, 3405, 3434, 3428, 3443, 3450, 3457, 3455, 3461,
     3464, 3466, 3488, 3490,    0,    0,    0,    0,    0, 3242,
     3257,    0, 3269,    0,    0,    0,    0, 3360,    0, 3417,
     3451,    0,    0, 3437,    0,    0, 3455, 3479, 3493,    0,
        0, 3499, 3502, 3504, 3506, 3511, 3513, 3544, 3517, 3528,
     3535, 3542, 3546, 3549, 3553, 3558, 3567, 3582, 3584, 3585,

     3596, 3589, 3598, 3607, 3614, 3603, 3621, 3625, 3481, 3545,
        0, 3576,    0, 3587,    0, 3609, 3625,    0, 3638, 3656,
     3640, 3659, 3647, 3665, 3661, 3663, 3690, 3672,    0, 3654,
        0, 3656,    0,    0, 3677, 3694, 3696, 3703, 3708, 3712,
        0,    0, 3715, 3719, 3809, 3784, 3788,  141, 3792, 3796,
     3800, 3804
    } ;

static yyconst flex_int16_t yy_def[953] =
    {   0,
      945,    1,  945,    3,  945,  945,  945,  945,  946,  945,
      947,  945,  945,  945,  945,  945,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  949,
      949,  945,  950,  949,  951,  949,  949,  949,  949,  949,
      952,  952,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  945,  946,  947,  945,  947,  945,  945,
      945,  945,  945,  945,  945,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,

      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  949,  949,
      950,  951,  949,  951,  949,  949,  949,  949,  949,  949,
      949,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  945,  947,  945,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,

      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  949,  951,  949,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,

      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,

      948,  948,  948,  948,  948,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,  948,  948,
      948,  948,  948,  948,   52,   52,   52,   52,   52,   52,
      948,  948,   52,   52,    0,  945,  945,  945,  945,  945,
      945,  945
    } ;

static yyconst flex_uint16_t yy_nxt[3876] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   33,   33,   33,    6,    6,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   33,   33,   33,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   44,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,

       73,   67,   67,   67,   40,   40,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   67,
       67,   67,   74,   74,   74,   74,   77,   81,   82,   83,
       84,  160,   74,   93,   86,  119,  105,  107,  111,  120,
      163,  106,  348,  108,  112,  247,  109,  348,  113,  110,
      166,  138,  152,   94,  153,  139,  114,  154,  248,   78,
       87,   93,   88,  119,  105,  107,  111,  120,   89,  106,
       90,  108,  112,  164,  109,   91,  113,  110,   92,  138,
      152,   94,  153,  139,  114,  154,  248,  115,   87,  346,

       88,   74,   74,   77,  116,  117,   89,  247,   90,  127,
      118,  121,  155,   91,  124,  122,   92,   95,  125,  249,
      156,  123,  126,  128,   96,  115,   80,  157,  158,  129,
      130,   97,  116,  117,   98,   99,   78,  127,  118,  121,
      155,  245,  124,  122,  171,   95,  125,  249,  156,  123,
      126,  128,   96,  246,  135,  157,  158,  129,  130,   97,
      166,  131,   98,   99,  100,  136,  167,  168,  101,  132,
      172,  137,  102,  133,  169,  170,  134,  197,  103,   74,
       74,  104,  135,  198,   81,   82,   78,  163,  172,  131,
      172,  165,  100,  136,  160,   74,  101,  132,  172,  137,

      102,  133,  191,  254,  134,  197,  103,  192,  172,  104,
      140,  198,  141,  347,  172,  142,  172,  199,  172,  206,
      164,  172,  143,  144,  205,  200,   77,  255,  145,  159,
      191,  254,  266,   85,  172,  192,  172,   80,  140,  172,
      141,  172,  172,  142,  207,  199,  164,  206,  208,  172,
      143,  144,  205,  200,  209,  255,  145,  146,  147,   78,
      266,  148,  172,   79,  172,  149,  267,  172,  172,  172,
      258,  150,  207,  945,  151,  945,  208,  259,  167,  168,
      945,  945,  209,  945,  945,  146,  147,  210,  172,  148,
      945,  211,  172,  149,  267,  212,  172,  224,  258,  150,

      945,  225,  151,  159,  159,  259,  159,  159,  159,  159,
      159,  172,  159,  159,  159,  210,  172,  172,  173,  211,
      174,  252,  250,  212,  253,  224,  175,  241,  176,  225,
      251,  172,  262,  177,  263,  242,  178,  945,  945,  172,
      163,  159,  945,  945,  945,  172,  173,  945,  174,  252,
      250,  172,  253,  945,  175,  241,  176,  264,  251,  172,
      262,  177,  263,  242,  178,  159,  159,  265,  159,  159,
      159,  159,  159,  164,  159,  159,  159,  256,  260,  172,
      172,  179,  261,  243,  244,  264,  272,  273,  274,  275,
      945,  257,  276,  281,  282,  265,  945,  283,  284,  285,

      172,  180,  945,  159,  286,  256,  260,  291,  172,  179,
      261,  243,  244,  268,  272,  273,  274,  275,  269,  257,
      276,  281,  282,  296,  270,  283,  284,  285,  172,  180,
      181,  271,  286,  297,  172,  291,  277,  182,  278,  298,
      287,  268,  279,  288,  183,  289,  269,  184,  185,  280,
      290,  296,  270,  299,  172,  945,  945,  304,  181,  271,
      945,  297,  172,  945,  277,  182,  278,  298,  287,  945,
      279,  288,  183,  289,  292,  184,  185,  280,  290,  945,
      305,  299,  172,  186,  293,  304,  300,  187,  301,  294,
      295,  188,  302,  306,  303,  307,  308,  189,  309,  310,

      190,  311,  292,  312,  313,  314,  315,  172,  305,  316,
      945,  186,  293,  317,  300,  187,  301,  294,  295,  188,
      302,  306,  303,  307,  308,  189,  309,  310,  190,  311,
      320,  312,  313,  314,  315,  172,  172,  316,  318,  321,
      193,  317,  322,  319,  324,  325,  194,  326,  327,  195,
      323,  328,  196,  329,  332,  333,  172,  945,  320,  945,
      334,  945,  337,  945,  172,  945,  318,  321,  193,  344,
      322,  319,  324,  325,  194,  326,  327,  195,  323,  328,
      196,  329,  332,  333,  172,  172,  201,  330,  334,  335,
      337,  338,  336,  202,  203,  339,  340,  344,  331,  204,

      345,  945,  341,  342,  945,  172,  945,  447,  945,  172,
      945,  349,  172,  172,  201,  330,  343,  335,  945,  338,
      336,  202,  203,  339,  340,  172,  331,  204,  345,  172,
      341,  342,  172,  172,  213,  447,  172,  172,  172,  349,
      172,  448,  945,  353,  343,  172,  354,  172,  214,  945,
      449,  350,  450,  172,  215,  216,  172,  172,  172,  945,
      172,  945,  213,  945,  172,  451,  172,  172,  945,  448,
      172,  353,  945,  172,  354,  172,  214,  351,  449,  350,
      450,  452,  215,  216,  172,  352,  172,  172,  217,  355,
      172,  172,  453,  451,  945,  172,  218,  361,  172,  945,

      219,  362,  172,  220,  356,  351,  454,  172,  945,  452,
      455,  172,  945,  352,  945,  172,  217,  355,  172,  172,
      453,  172,  172,  945,  218,  361,  172,  357,  219,  362,
      172,  220,  356,  456,  454,  172,  221,  172,  455,  172,
      172,  358,  365,  457,  359,  458,  172,  222,  945,  172,
      172,  360,  366,  223,  172,  357,  945,  172,  945,  945,
      172,  456,  172,  945,  221,  172,  945,  172,  172,  358,
      365,  457,  359,  458,  172,  222,  172,  172,  945,  360,
      366,  223,  368,  945,  363,  172,  364,  172,  172,  226,
      172,  227,  459,  367,  228,  172,  172,  172,  462,  945,

      945,  229,  230,  945,  172,  172,  377,  231,  172,  463,
      368,  172,  363,  945,  364,  172,  945,  226,  172,  227,
      459,  367,  228,  466,  172,  172,  462,  172,  172,  229,
      230,  373,  374,  172,  377,  231,  172,  463,  172,  172,
      232,  233,  172,  375,  234,  945,  172,  172,  235,  945,
      945,  466,  376,  172,  236,  172,  172,  237,  464,  373,
      374,  172,  172,  945,  172,  945,  172,  945,  232,  233,
      172,  375,  234,  465,  945,  172,  235,  172,  172,  945,
      376,  172,  236,  172,  382,  237,  464,  467,  172,  172,
      172,  383,  172,  172,  392,  385,  945,  172,  172,  384,

      172,  465,  238,  172,  239,  172,  172,  240,  172,  172,
      386,  172,  382,  172,  945,  467,  172,  172,  945,  383,
      172,  172,  392,  385,  172,  172,  172,  384,  172,  172,
      238,  172,  239,  398,  387,  240,  172,  172,  386,  468,
      945,  172,  369,  945,  172,  469,  172,  370,  172,  172,
      945,  172,  172,  371,  945,  470,  172,  172,  945,  945,
      372,  398,  387,  945,  945,  388,  172,  468,  389,  945,
      369,  172,  172,  469,  172,  370,  399,  172,  172,  172,
      945,  371,  172,  470,  172,  172,  400,  390,  372,  945,
      471,  397,  391,  388,  172,  378,  389,  379,  172,  172,

      472,  380,  172,  945,  399,  172,  172,  403,  381,  404,
      172,  172,  945,  172,  400,  390,  945,  172,  471,  397,
      391,  473,  172,  378,  945,  379,  172,  474,  472,  380,
      172,  172,  172,  172,  945,  403,  381,  404,  401,  172,
      402,  405,  172,  172,  172,  172,  393,  172,  945,  473,
      172,  945,  172,  475,  945,  474,  394,  406,  408,  172,
      172,  395,  396,  172,  172,  945,  401,  172,  402,  405,
      172,  172,  172,  172,  393,  172,  172,  172,  945,  172,
      172,  475,  407,  410,  394,  406,  408,  476,  477,  395,
      396,  172,  172,  172,  409,  172,  172,  172,  945,  172,

      945,  172,  411,  172,  172,  172,  172,  172,  172,  412,
      407,  410,  413,  172,  945,  476,  477,  478,  414,  172,
      945,  172,  409,  172,  172,  172,  172,  172,  172,  945,
      411,  172,  415,  172,  172,  945,  172,  412,  416,  172,
      413,  172,  172,  172,  417,  478,  414,  172,  418,  945,
      945,  172,  419,  172,  172,  421,  172,  420,  172,  945,
      415,  172,  172,  172,  172,  479,  416,  172,  425,  172,
      172,  172,  417,  172,  172,  945,  418,  422,  172,  172,
      419,  172,  426,  421,  480,  420,  172,  428,  172,  172,
      172,  172,  172,  479,  172,  423,  425,  172,  945,  172,

      427,  172,  172,  424,  172,  422,  172,  172,  172,  945,
      426,  429,  480,  172,  172,  428,  172,  172,  172,  481,
      430,  945,  172,  423,  172,  482,  431,  172,  427,  172,
      945,  424,  172,  172,  172,  172,  172,  432,  172,  429,
      434,  172,  172,  433,  172,  945,  172,  481,  430,  172,
      483,  945,  172,  482,  431,  172,  484,  172,  438,  172,
      435,  172,  172,  172,  172,  432,  172,  945,  434,  172,
      439,  433,  172,  436,  440,  945,  437,  172,  483,  172,
      945,  945,  485,  172,  484,  945,  438,  172,  435,  172,
      172,  445,  172,  172,  172,  443,  486,  172,  439,  460,

      441,  436,  440,  461,  437,  487,  442,  172,  444,  446,
      485,  172,  488,  172,  172,  172,  489,  172,  172,  445,
      491,  172,  172,  443,  486,  492,  490,  460,  441,  493,
      494,  461,  495,  487,  442,  496,  444,  446,  497,  172,
      488,  172,  172,  172,  489,  498,  499,  500,  491,  501,
      502,  503,  504,  492,  490,  505,  508,  493,  494,  509,
      495,  510,  506,  496,  511,  512,  497,  513,  514,  515,
      516,  517,  518,  498,  499,  500,  519,  501,  502,  503,
      504,  507,  520,  505,  508,  521,  522,  509,  523,  510,
      506,  526,  511,  512,  527,  513,  514,  515,  516,  517,

      518,  524,  528,  525,  519,  529,  530,  531,  532,  507,
      520,  533,  534,  521,  522,  945,  523,  172,  535,  526,
      945,  172,  527,  536,  172,  945,  945,  623,  172,  524,
      528,  525,  945,  529,  530,  531,  532,  172,  172,  533,
      534,  172,  172,  172,  172,  172,  535,  172,  172,  172,
      945,  536,  172,  172,  537,  623,  172,  945,  541,  172,
      172,  624,  172,  538,  945,  172,  172,  172,  945,  172,
      172,  172,  172,  172,  625,  172,  172,  539,  172,  172,
      172,  172,  537,  172,  172,  540,  541,  172,  172,  624,
      172,  538,  543,  945,  172,  172,  542,  945,  172,  626,

      544,  172,  625,  172,  172,  539,  172,  172,  172,  172,
      172,  172,  172,  540,  172,  546,  172,  548,  945,  172,
      543,  549,  172,  547,  542,  545,  172,  626,  544,  172,
      172,  172,  172,  945,  555,  627,  172,  172,  172,  172,
      945,  172,  172,  546,  172,  548,  551,  172,  172,  549,
      172,  547,  945,  545,  172,  550,  945,  172,  172,  554,
      552,  172,  555,  627,  172,  945,  628,  172,  172,  172,
      172,  172,  560,  559,  551,  553,  172,  172,  172,  945,
      172,  172,  172,  550,  172,  945,  556,  554,  552,  172,
      557,  172,  172,  172,  628,  558,  172,  172,  172,  172,

      560,  559,  172,  553,  172,  172,  629,  564,  172,  172,
      630,  172,  172,  172,  556,  561,  562,  172,  557,  172,
      172,  172,  172,  558,  945,  172,  172,  172,  172,  945,
      172,  172,  172,  563,  629,  564,  565,  172,  630,  172,
      172,  172,  172,  561,  562,  172,  172,  566,  172,  567,
      172,  574,  172,  172,  172,  172,  172,  570,  568,  172,
      172,  563,  172,  172,  565,  172,  569,  172,  172,  172,
      172,  172,  172,  172,  172,  566,  172,  567,  575,  574,
      172,  172,  571,  172,  572,  570,  568,  172,  172,  172,
      172,  172,  631,  172,  569,  172,  576,  172,  172,  172,

      172,  172,  172,  573,  632,  172,  575,  172,  577,  582,
      571,  172,  572,  172,  580,  172,  172,  172,  578,  172,
      631,  172,  172,  579,  576,  172,  172,  172,  172,  172,
      172,  573,  632,  172,  581,  172,  577,  582,  633,  172,
      172,  172,  580,  634,  172,  172,  578,  172,  585,  583,
      172,  579,  172,  172,  172,  172,  172,  172,  584,  172,
      172,  172,  581,  586,  172,  172,  633,  172,  172,  945,
      587,  634,  172,  172,  172,  945,  585,  583,  945,  172,
      172,  172,  172,  172,  172,  592,  584,  172,  172,  172,
      172,  586,  172,  172,  593,  172,  635,  589,  587,  588,

      172,  636,  172,  172,  945,  172,  172,  172,  590,  172,
      172,  172,  172,  592,  172,  172,  945,  945,  172,  945,
      591,  172,  593,  172,  635,  589,  172,  588,  594,  636,
      596,  172,  172,  172,  172,  172,  590,  172,  172,  602,
      599,  172,  172,  172,  172,  598,  597,  595,  591,  172,
      172,  172,  172,  601,  172,  172,  594,  172,  596,  172,
      172,  945,  603,  172,  172,  172,  600,  602,  599,  172,
      172,  172,  172,  598,  597,  595,  172,  172,  172,  172,
      172,  601,  172,  172,  945,  172,  172,  172,  172,  172,
      603,  172,  172,  172,  600,  604,  172,  172,  172,  172,

      607,  605,  945,  606,  172,  172,  172,  172,  172,  172,
      172,  172,  610,  172,  172,  637,  172,  172,  608,  172,
      945,  172,  945,  604,  172,  172,  945,  172,  607,  605,
      172,  606,  172,  172,  172,  172,  172,  172,  638,  172,
      610,  172,  172,  637,  172,  609,  608,  172,  172,  945,
      172,  611,  639,  172,  612,  172,  613,  614,  172,  615,
      172,  172,  172,  172,  172,  945,  638,  172,  172,  945,
      172,  945,  172,  609,  945,  172,  172,  172,  172,  611,
      639,  172,  612,  172,  613,  614,  616,  615,  172,  172,
      172,  172,  172,  172,  640,  172,  172,  172,  618,  172,

      172,  641,  622,  172,  617,  172,  621,  619,  172,  172,
      642,  172,  643,  172,  616,  644,  172,  172,  620,  172,
      172,  172,  640,  172,  645,  172,  618,  172,  172,  641,
      622,  172,  617,  646,  621,  619,  172,  172,  642,  647,
      643,  172,  648,  644,  649,  650,  620,  172,  172,  651,
      652,  172,  645,  653,  654,  655,  657,  658,  659,  660,
      661,  646,  662,  663,  664,  665,  656,  647,  666,  667,
      648,  668,  649,  650,  669,  670,  671,  651,  652,  672,
      673,  653,  654,  655,  657,  658,  659,  660,  661,  674,
      662,  663,  664,  665,  656,  675,  666,  667,  676,  668,

      677,  678,  669,  670,  671,  679,  680,  672,  673,  681,
      682,  683,  684,  685,  686,  687,  688,  674,  689,  945,
      945,  945,  945,  675,  945,  757,  676,  945,  677,  678,
      172,  694,  172,  679,  680,  172,  172,  681,  682,  683,
      684,  685,  686,  687,  688,  690,  689,  172,  691,  693,
      692,  172,  172,  757,  172,  172,  172,  695,  172,  694,
      172,  172,  945,  172,  172,  945,  172,  172,  945,  758,
      759,  760,  696,  690,  172,  172,  691,  693,  692,  172,
      172,  172,  172,  172,  172,  695,  172,  172,  172,  172,
      172,  172,  945,  172,  172,  172,  697,  758,  759,  760,

      696,  700,  172,  698,  945,  945,  699,  172,  172,  172,
      172,  172,  945,  172,  172,  172,  172,  701,  172,  172,
      172,  172,  761,  172,  697,  762,  172,  763,  945,  700,
      702,  698,  172,  705,  699,  172,  172,  172,  172,  172,
      172,  172,  703,  172,  172,  701,  172,  704,  172,  764,
      761,  172,  172,  762,  172,  763,  172,  172,  702,  172,
      172,  705,  765,  707,  172,  172,  172,  706,  172,  172,
      703,  172,  172,  708,  172,  704,  172,  764,  766,  172,
      172,  945,  172,  945,  172,  172,  172,  172,  172,  172,
      765,  707,  172,  709,  172,  706,  713,  172,  172,  710,

      172,  708,  172,  172,  172,  172,  766,  172,  172,  172,
      172,  714,  172,  712,  172,  172,  172,  172,  172,  711,
      172,  709,  172,  172,  713,  172,  172,  710,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  767,  714,
      172,  712,  172,  172,  172,  715,  172,  711,  172,  172,
      172,  172,  768,  172,  172,  172,  945,  172,  716,  172,
      172,  172,  172,  172,  172,  717,  767,  945,  945,  172,
      172,  172,  172,  715,  718,  172,  172,  172,  719,  172,
      768,  172,  172,  172,  720,  172,  716,  172,  172,  172,
      722,  172,  172,  717,  172,  172,  172,  172,  721,  172,

      172,  723,  718,  172,  172,  172,  719,  172,  172,  172,
      172,  769,  720,  172,  172,  172,  172,  724,  722,  172,
      172,  172,  172,  172,  172,  945,  721,  172,  172,  723,
      172,  172,  727,  172,  726,  945,  172,  172,  172,  769,
      945,  172,  172,  172,  770,  724,  725,  172,  172,  172,
      172,  172,  172,  172,  730,  172,  172,  172,  172,  172,
      727,  945,  726,  731,  728,  172,  729,  945,  172,  172,
      172,  945,  770,  172,  725,  172,  172,  172,  172,  172,
      172,  172,  730,  172,  172,  172,  172,  172,  172,  172,
      732,  731,  728,  771,  729,  734,  172,  172,  172,  733,

      772,  172,  172,  945,  172,  172,  172,  172,  735,  172,
      737,  172,  172,  172,  172,  172,  172,  172,  732,  945,
      736,  771,  172,  734,  172,  172,  738,  733,  772,  773,
      172,  172,  172,  172,  172,  172,  735,  172,  737,  774,
      172,  172,  172,  742,  172,  172,  739,  741,  736,  172,
      172,  172,  172,  740,  738,  945,  945,  773,  744,  172,
      172,  172,  172,  172,  172,  172,  775,  774,  743,  172,
      172,  742,  172,  172,  739,  741,  945,  172,  172,  172,
      172,  740,  945,  172,  172,  172,  744,  172,  776,  172,
      172,  172,  172,  172,  775,  745,  743,  172,  748,  749,

      172,  746,  747,  172,  172,  172,  172,  172,  172,  172,
      750,  172,  172,  172,  172,  172,  776,  172,  945,  753,
      172,  172,  752,  745,  172,  172,  748,  749,  172,  746,
      747,  172,  172,  172,  172,  172,  751,  172,  750,  172,
      172,  172,  172,  172,  945,  172,  754,  753,  172,  172,
      752,  777,  172,  172,  778,  756,  172,  172,  779,  780,
      781,  782,  172,  172,  751,  783,  784,  172,  172,  172,
      785,  172,  755,  172,  754,  172,  172,  172,  786,  777,
      787,  788,  778,  756,  172,  172,  779,  780,  781,  782,
      789,  172,  790,  783,  784,  791,  792,  793,  785,  794,

      755,  795,  796,  172,  172,  172,  786,  797,  787,  788,
      798,  799,  800,  801,  802,  803,  804,  805,  789,  945,
      790,  945,  945,  791,  792,  793,  172,  794,  172,  795,
      796,  172,  855,  807,  945,  797,  945,  808,  798,  799,
      800,  801,  802,  803,  804,  805,  172,  172,  172,  809,
      172,  172,  806,  172,  172,  945,  172,  172,  945,  172,
      855,  807,  172,  172,  812,  808,  172,  172,  945,  945,
      172,  810,  945,  811,  172,  172,  172,  809,  172,  172,
      806,  172,  172,  172,  172,  172,  172,  172,  945,  813,
      172,  172,  812,  172,  172,  172,  172,  814,  172,  810,

      816,  811,  172,  815,  945,  945,  819,  172,  856,  820,
      172,  172,  172,  172,  172,  172,  172,  813,  172,  945,
      172,  172,  172,  172,  172,  814,  172,  172,  816,  172,
      172,  815,  818,  817,  819,  172,  856,  820,  172,  172,
      857,  172,  821,  172,  172,  858,  172,  172,  172,  172,
      172,  172,  172,  823,  172,  172,  824,  172,  172,  172,
      818,  817,  172,  859,  822,  825,  172,  172,  857,  172,
      821,  172,  172,  858,  172,  172,  826,  172,  172,  172,
      172,  823,  172,  172,  824,  945,  172,  172,  172,  830,
      172,  859,  822,  825,  172,  860,  827,  172,  172,  172,

      172,  172,  172,  172,  826,  172,  172,  172,  172,  172,
      172,  172,  172,  828,  172,  831,  172,  830,  172,  832,
      829,  172,  172,  860,  827,  172,  172,  172,  945,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  945,  172,
      172,  828,  172,  831,  945,  172,  172,  832,  829,  172,
      172,  172,  833,  172,  834,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  945,  172,  836,  172,  945,  945,
      839,  172,  835,  172,  945,  172,  172,  172,  172,  172,
      833,  172,  834,  172,  172,  172,  172,  172,  837,  172,
      172,  172,  172,  172,  836,  172,  840,  172,  839,  172,

      835,  945,  841,  172,  172,  172,  172,  172,  861,  172,
      838,  172,  172,  945,  172,  945,  837,  172,  172,  172,
      172,  945,  842,  172,  840,  172,  172,  172,  843,  172,
      841,  172,  172,  945,  172,  172,  861,  844,  838,  172,
      172,  172,  172,  172,  846,  172,  845,  849,  862,  172,
      842,  172,  172,  945,  172,  172,  843,  172,  847,  172,
      172,  172,  172,  172,  848,  844,  863,  172,  172,  172,
      172,  172,  846,  851,  845,  849,  862,  172,  172,  172,
      172,  850,  172,  172,  864,  945,  847,  172,  172,  172,
      172,  172,  848,  172,  863,  172,  172,  852,  172,  865,

      853,  851,  172,  172,  172,  866,  172,  172,  867,  850,
      172,  172,  864,  854,  868,  172,  172,  172,  869,  870,
      871,  172,  872,  873,  172,  852,  172,  865,  853,  874,
      172,  172,  172,  866,  875,  172,  867,  172,  876,  877,
      878,  854,  868,  879,  880,  172,  869,  870,  871,  881,
      872,  873,  172,  882,  172,  172,  884,  874,  909,  945,
      172,  945,  875,  945,  883,  172,  876,  877,  878,  910,
      945,  879,  880,  172,  172,  172,  172,  881,  172,  172,
      172,  882,  172,  172,  884,  886,  909,  888,  172,  172,
      945,  172,  883,  885,  172,  945,  172,  910,  172,  172,

      911,  172,  172,  172,  172,  887,  172,  172,  172,  172,
      172,  172,  945,  886,  172,  888,  172,  172,  890,  172,
      172,  885,  172,  172,  172,  889,  172,  172,  911,  172,
      172,  945,  172,  887,  891,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  892,  890,  172,  172,  172,
      172,  172,  172,  889,  172,  172,  172,  172,  172,  172,
      172,  172,  891,  172,  172,  172,  945,  172,  172,  172,
      893,  172,  895,  892,  912,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  899,  172,
      172,  172,  172,  172,  894,  172,  172,  896,  893,  897,

      895,  172,  912,  172,  172,  945,  172,  172,  172,  172,
      172,  900,  172,  172,  172,  172,  899,  172,  172,  172,
      172,  172,  894,  172,  172,  896,  901,  897,  172,  172,
      898,  172,  172,  172,  172,  172,  172,  172,  172,  900,
      172,  172,  945,  172,  172,  172,  913,  902,  172,  172,
      172,  172,  945,  172,  901,  904,  172,  903,  898,  172,
      172,  172,  905,  172,  172,  172,  172,  914,  915,  172,
      172,  172,  172,  172,  913,  902,  172,  172,  172,  172,
      172,  172,  172,  904,  916,  903,  172,  172,  906,  945,
      905,  172,  172,  172,  172,  914,  915,  172,  172,  172,

      172,  172,  172,  917,  172,  172,  172,  172,  172,  918,
      172,  929,  916,  908,  172,  172,  906,  907,  172,  172,
      172,  172,  172,  945,  172,  172,  172,  172,  172,  919,
      172,  917,  172,  172,  172,  172,  945,  918,  172,  929,
      172,  908,  172,  172,  172,  907,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  920,  919,  172,  921,
      172,  172,  172,  172,  172,  172,  172,  922,  172,  172,
      172,  172,  172,  945,  172,  172,  930,  172,  172,  172,
      172,  172,  172,  172,  920,  172,  172,  921,  172,  172,
      172,  945,  172,  172,  172,  922,  923,  172,  924,  172,

      172,  172,  172,  172,  930,  172,  172,  931,  172,  945,
      172,  172,  172,  172,  172,  945,  932,  172,  172,  928,
      172,  172,  172,  172,  923,  172,  924,  925,  172,  172,
      172,  172,  172,  172,  172,  931,  926,  172,  927,  172,
      172,  172,  172,  172,  932,  933,  172,  928,  172,  172,
      172,  172,  934,  172,  172,  925,  172,  172,  172,  945,
      172,  172,  172,  172,  926,  172,  927,  172,  935,  172,
      941,  172,  172,  933,  172,  172,  172,  172,  172,  172,
      934,  172,  172,  172,  172,  172,  942,  936,  172,  172,
      937,  172,  172,  172,  938,  172,  935,  172,  941,  939,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      943,  172,  172,  172,  942,  936,  172,  940,  937,  172,
      172,  172,  938,  172,  172,  172,  172,  939,  172,  172,
      172,  172,  172,  944,  172,  172,  172,  945,  943,  172,
      172,  172,  945,  945,  172,  940,  945,  172,  172,  945,
      945,  172,  172,  945,  172,  172,  172,  945,  172,  172,
      172,  944,  945,  172,  945,  945,  945,  172,  945,  945,
      945,  945,  172,  945,  945,  945,  172,  945,  945,  172,
      945,  945,  945,  172,   75,  945,  945,   75,   76,  945,
       76,   76,  159,  945,  159,  159,  161,  945,  161,  161,

      162,  945,  162,  162,  172,  945,  172,  172,    5,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945
    } ;

static yyconst flex_int16_t yy_chk[3876] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    7,    7,    8,    8,   11,   14,   14,   15,
       15,   41,   41,   18,  948,   26,   21,   22,   23,   27,
       45,   21,  348,   22,   23,  247,   22,  167,   24,   22,
      166,   34,   37,   18,   37,   34,   24,   37,   87,   11,
       17,   18,   17,   26,   21,   22,   23,   27,   17,   21,
       17,   22,   23,   45,   22,   17,   24,   22,   17,   34,
       37,   18,   37,   34,   24,   37,   87,   25,   17,  161,

       17,   42,   42,   76,   25,   25,   17,   81,   17,   30,
       25,   28,   38,   17,   29,   28,   17,   19,   29,   88,
       38,   28,   29,   30,   19,   25,   80,   39,   39,   30,
       30,   19,   25,   25,   19,   19,   76,   30,   25,   28,
       38,   75,   29,   28,   50,   19,   29,   88,   38,   28,
       29,   30,   19,   78,   32,   39,   39,   30,   30,   19,
       47,   31,   19,   19,   20,   32,   48,   48,   20,   31,
       57,   32,   20,   31,   49,   49,   31,   57,   20,   74,
       74,   20,   32,   57,   82,   82,   78,  162,   55,   31,
       57,   46,   20,   32,  160,  160,   20,   31,   57,   32,

       20,   31,   55,   91,   31,   57,   20,   55,   55,   20,
       35,   57,   35,  164,   60,   35,   55,   58,   57,   61,
      162,   58,   35,   35,   60,   58,  246,   92,   35,   43,
       55,   91,   99,   16,   60,   55,   55,   13,   35,   61,
       35,   58,   60,   35,   62,   58,  164,   61,   62,   58,
       35,   35,   60,   58,   62,   92,   35,   36,   36,  246,
       99,   36,   60,   12,   62,   36,  100,   61,   67,   58,
       95,   36,   62,    5,   36,    0,   62,   95,  168,  168,
        0,    0,   62,    0,    0,   36,   36,   63,   67,   36,
        0,   63,   62,   36,  100,   63,   67,   68,   95,   36,

        0,   68,   36,   51,   51,   95,   51,   51,   51,   51,
       51,   63,   51,   51,   51,   63,   67,   68,   51,   63,
       51,   90,   89,   63,   90,   68,   51,   72,   51,   68,
       89,   72,   97,   51,   97,   72,   51,    0,    0,   63,
      347,   51,    0,    0,    0,   68,   51,    0,   51,   90,
       89,   72,   90,    0,   51,   72,   51,   98,   89,   72,
       97,   51,   97,   72,   51,   52,   52,   98,   52,   52,
       52,   52,   52,  347,   52,   52,   52,   93,   96,   72,
       73,   52,   96,   73,   73,   98,  102,  102,  103,  104,
        0,   93,  105,  107,  108,   98,    0,  109,  110,  111,

       73,   52,    0,   52,  112,   93,   96,  116,   73,   52,
       96,   73,   73,  101,  102,  102,  103,  104,  101,   93,
      105,  107,  108,  118,  101,  109,  110,  111,   73,   52,
       53,  101,  112,  119,   53,  116,  106,   53,  106,  120,
      113,  101,  106,  113,   53,  114,  101,   53,   53,  106,
      114,  118,  101,  121,   53,    0,    0,  124,   53,  101,
        0,  119,   53,    0,  106,   53,  106,  120,  113,    0,
      106,  113,   53,  114,  117,   53,   53,  106,  114,    0,
      125,  121,   53,   54,  117,  124,  122,   54,  122,  117,
      117,   54,  123,  126,  123,  127,  128,   54,  129,  130,

       54,  131,  117,  133,  134,  135,  136,   54,  125,  137,
        0,   54,  117,  137,  122,   54,  122,  117,  117,   54,
      123,  126,  123,  127,  128,   54,  129,  130,   54,  131,
      139,  133,  134,  135,  136,   54,   56,  137,  138,  140,
       56,  137,  141,  138,  142,  143,   56,  144,  145,   56,
      141,  146,   56,  147,  149,  150,   56,    0,  139,    0,
      151,    0,  153,    0,   56,    0,  138,  140,   56,  157,
      141,  138,  142,  143,   56,  144,  145,   56,  141,  146,
       56,  147,  149,  150,   56,   59,   59,  148,  151,  152,
      153,  154,  152,   59,   59,  154,  155,  157,  148,   59,

      158,    0,  155,  156,    0,   59,    0,  249,    0,  172,
        0,  173,  173,   59,   59,  148,  156,  152,    0,  154,
      152,   59,   59,  154,  155,  180,  148,   59,  158,  172,
      155,  156,  173,   59,   64,  249,  174,  172,   64,  173,
      173,  251,    0,  176,  156,  180,  176,  176,   64,    0,
      252,  174,  256,  180,   64,   64,  174,  172,   64,    0,
      173,    0,   64,    0,  174,  257,   64,  176,    0,  251,
      175,  176,    0,  180,  176,  176,   64,  175,  252,  174,
      256,  258,   64,   64,  174,  175,   64,   65,   65,  177,
      175,  177,  259,  257,    0,  176,   65,  182,  175,    0,

       65,  182,  178,   65,  178,  175,  260,   65,    0,  258,
      261,  177,    0,  175,    0,   65,   65,  177,  175,  177,
      259,  182,  178,    0,   65,  182,  179,  179,   65,  182,
      178,   65,  178,  262,  260,   65,   66,  181,  261,  177,
       66,  179,  184,  263,  181,  264,  179,   66,    0,  182,
      178,  181,  184,   66,  179,  179,    0,  181,    0,    0,
       66,  262,  184,    0,   66,  181,    0,  186,   66,  179,
      184,  263,  181,  264,  179,   66,  185,  183,    0,  181,
      184,   66,  186,    0,  183,  181,  183,  186,   66,   69,
      184,   69,  265,  185,   69,  186,  185,  183,  268,    0,

        0,   69,   69,    0,  185,  183,  191,   69,  191,  269,
      186,   69,  183,    0,  183,  186,    0,   69,  188,   69,
      265,  185,   69,  271,  185,  183,  268,  189,  191,   69,
       69,  188,  188,  201,  191,   69,  191,  269,  188,   69,
       70,   70,  190,  189,   70,    0,  188,  189,   70,    0,
        0,  271,  190,  201,   70,  189,  191,   70,  270,  188,
      188,  201,  190,    0,   70,    0,  188,    0,   70,   70,
      190,  189,   70,  270,    0,  189,   70,  193,  194,    0,
      190,  201,   70,  202,  193,   70,  270,  272,  196,  195,
      190,  194,   70,   71,  202,  196,    0,  193,  194,  195,

      197,  270,   71,  202,   71,  193,  194,   71,  196,  195,
      197,  202,  193,   71,    0,  272,  196,  195,    0,  194,
      197,   71,  202,  196,  198,  193,  194,  195,  197,  205,
       71,  202,   71,  205,  198,   71,  196,  195,  197,  273,
        0,   71,  187,    0,  198,  274,  187,  187,  197,  205,
        0,  199,  198,  187,    0,  275,  206,  205,    0,    0,
      187,  205,  198,    0,    0,  199,  187,  273,  199,    0,
      187,  199,  198,  274,  187,  187,  206,  205,  200,  199,
        0,  187,  204,  275,  206,  207,  207,  200,  187,    0,
      276,  204,  200,  199,  187,  192,  199,  192,  200,  199,

      277,  192,  204,    0,  206,  207,  200,  209,  192,  209,
      204,  209,    0,  207,  207,  200,    0,  192,  276,  204,
      200,  278,  210,  192,    0,  192,  200,  279,  277,  192,
      204,  209,  208,  207,    0,  209,  192,  209,  208,  209,
      208,  210,  210,  213,  211,  192,  203,  203,    0,  278,
      210,    0,  208,  280,    0,  279,  203,  211,  213,  209,
      208,  203,  203,  213,  211,    0,  208,  203,  208,  210,
      210,  213,  211,  212,  203,  203,  215,  218,    0,  214,
      208,  280,  212,  215,  203,  211,  213,  281,  283,  203,
      203,  213,  211,  212,  214,  203,  215,  218,    0,  214,

        0,  212,  216,  220,  215,  218,  216,  214,  217,  217,
      212,  215,  219,  219,    0,  281,  283,  284,  220,  221,
        0,  212,  214,  220,  215,  218,  216,  214,  217,    0,
      216,  220,  221,  219,  216,    0,  217,  217,  222,  221,
      219,  219,  222,  224,  223,  284,  220,  221,  223,    0,
        0,  220,  224,  225,  216,  225,  217,  224,  228,    0,
      221,  219,  222,  224,  223,  285,  222,  221,  228,  229,
      222,  224,  223,  225,  226,    0,  223,  226,  228,  231,
      224,  225,  229,  225,  286,  224,  228,  231,  227,  229,
      222,  224,  223,  285,  226,  227,  228,  229,    0,  231,

      230,  225,  226,  227,  230,  226,  228,  231,  227,    0,
      229,  232,  286,  233,  232,  231,  227,  229,  234,  287,
      233,    0,  226,  227,  230,  288,  234,  231,  230,  236,
        0,  227,  230,  233,  232,  235,  227,  234,  234,  232,
      236,  233,  232,  235,  237,    0,  234,  287,  233,  236,
      289,    0,  230,  288,  234,  235,  290,  236,  239,  239,
      237,  233,  232,  235,  237,  234,  234,    0,  236,  238,
      240,  235,  237,  238,  240,    0,  238,  236,  289,  239,
        0,    0,  291,  235,  290,    0,  239,  239,  237,  238,
      240,  243,  237,  241,  244,  242,  292,  238,  240,  267,

      241,  238,  240,  267,  238,  293,  241,  239,  242,  244,
      291,  243,  294,  241,  244,  242,  295,  238,  240,  243,
      296,  241,  244,  242,  292,  297,  295,  267,  241,  299,
      300,  267,  301,  293,  241,  302,  242,  244,  303,  243,
      294,  241,  244,  242,  295,  305,  306,  307,  296,  309,
      310,  311,  312,  297,  295,  313,  315,  299,  300,  316,
      301,  317,  314,  302,  318,  319,  303,  320,  321,  322,
      324,  325,  326,  305,  306,  307,  328,  309,  310,  311,
      312,  314,  330,  313,  315,  331,  332,  316,  334,  317,
      314,  336,  318,  319,  337,  320,  321,  322,  324,  325,

      326,  335,  339,  335,  328,  340,  341,  342,  343,  314,
      330,  344,  345,  331,  332,    0,  334,  349,  350,  336,
        0,  351,  337,  352,  354,    0,    0,  447,  355,  335,
      339,  335,    0,  340,  341,  342,  343,  349,  350,  344,
      345,  351,  356,  352,  354,  349,  350,  353,  355,  351,
        0,  352,  354,  357,  353,  447,  355,    0,  360,  358,
      360,  448,  356,  357,    0,  349,  350,  353,    0,  351,
      356,  352,  354,  357,  449,  353,  355,  358,  359,  358,
      360,  357,  353,  361,  363,  359,  360,  358,  360,  448,
      356,  357,  362,    0,  362,  353,  361,    0,  359,  450,

      363,  357,  449,  361,  363,  358,  359,  358,  360,  366,
      364,  361,  363,  359,  362,  365,  367,  368,    0,  365,
      362,  368,  362,  366,  361,  364,  359,  450,  363,  366,
      364,  361,  363,    0,  373,  451,  367,  366,  364,  365,
        0,  368,  362,  365,  367,  368,  370,  365,  369,  368,
      370,  366,    0,  364,  373,  369,    0,  366,  364,  372,
      371,  372,  373,  451,  367,    0,  453,  365,  369,  368,
      370,  374,  378,  377,  370,  371,  369,  377,  370,    0,
      371,  372,  373,  369,  376,    0,  374,  372,  371,  372,
      375,  374,  378,  375,  453,  376,  369,  377,  370,  374,

      378,  377,  380,  371,  376,  377,  455,  382,  371,  372,
      456,  383,  376,  375,  374,  379,  380,  379,  375,  374,
      378,  375,  380,  376,    0,  377,  381,  382,  384,    0,
      380,  383,  376,  381,  455,  382,  384,  379,  456,  383,
      385,  375,  387,  379,  380,  379,  381,  385,  384,  386,
      380,  393,  386,  389,  381,  382,  384,  389,  387,  383,
      385,  381,  387,  388,  384,  379,  388,  390,  385,  391,
      387,  393,  386,  389,  381,  385,  384,  386,  394,  393,
      386,  389,  390,  388,  391,  389,  387,  390,  385,  391,
      387,  388,  457,  392,  388,  390,  395,  391,  394,  393,

      386,  389,  399,  392,  458,  398,  394,  397,  396,  401,
      390,  388,  391,  392,  398,  390,  395,  391,  396,  400,
      457,  392,  399,  397,  395,  398,  394,  397,  396,  401,
      399,  392,  458,  398,  400,  397,  396,  401,  459,  400,
      405,  392,  398,  460,  395,  402,  396,  400,  404,  402,
      399,  397,  404,  398,  407,  397,  396,  401,  403,  403,
      405,  406,  400,  406,  409,  402,  459,  400,  405,    0,
      407,  460,  404,  402,  407,    0,  404,  402,    0,  403,
      404,  406,  407,  408,  409,  413,  403,  403,  405,  406,
      410,  406,  409,  402,  414,  411,  462,  410,  407,  408,

      404,  463,  407,  408,    0,  413,  412,  403,  411,  406,
      410,  408,  409,  413,  414,  411,    0,    0,  410,    0,
      412,  416,  414,  411,  462,  410,  412,  408,  415,  463,
      416,  408,  415,  413,  412,  417,  411,  418,  410,  422,
      419,  416,  414,  411,  419,  418,  417,  415,  412,  416,
      421,  420,  415,  421,  412,  417,  415,  418,  416,  422,
      415,    0,  423,  417,  419,  418,  420,  422,  419,  416,
      421,  420,  419,  418,  417,  415,  424,  425,  421,  420,
      415,  421,  423,  417,    0,  418,  426,  422,  427,  428,
      423,  430,  419,  429,  420,  425,  424,  425,  421,  420,

      429,  426,    0,  427,  424,  425,  426,  431,  427,  428,
      423,  430,  433,  429,  426,  464,  427,  428,  431,  430,
        0,  429,    0,  425,  424,  425,    0,  431,  429,  426,
      432,  427,  433,  434,  426,  431,  427,  428,  465,  430,
      433,  429,  435,  464,  436,  432,  431,  437,  439,    0,
      432,  435,  467,  434,  436,  431,  436,  437,  432,  438,
      433,  434,  435,  438,  436,    0,  465,  437,  439,    0,
      435,    0,  436,  432,    0,  437,  439,  440,  432,  435,
      467,  434,  436,  438,  436,  437,  440,  438,  441,  443,
      435,  438,  436,  445,  468,  437,  439,  440,  442,  446,

      442,  469,  446,  444,  441,  440,  445,  443,  441,  443,
      471,  438,  472,  445,  440,  473,  441,  443,  444,  446,
      442,  445,  468,  444,  474,  440,  442,  446,  442,  469,
      446,  444,  441,  475,  445,  443,  441,  443,  471,  479,
      472,  445,  480,  473,  482,  484,  444,  446,  442,  485,
      486,  444,  474,  487,  488,  489,  491,  495,  497,  498,
      499,  475,  500,  502,  503,  504,  489,  479,  505,  506,
      480,  509,  482,  484,  510,  511,  512,  485,  486,  513,
      514,  487,  488,  489,  491,  495,  497,  498,  499,  515,
      500,  502,  503,  504,  489,  517,  505,  506,  518,  509,

      519,  520,  510,  511,  512,  522,  523,  513,  514,  524,
      525,  526,  527,  528,  529,  530,  532,  515,  533,    0,
        0,    0,    0,  517,    0,  625,  518,    0,  519,  520,
      537,  539,  535,  522,  523,  536,  538,  524,  525,  526,
      527,  528,  529,  530,  532,  535,  533,  540,  536,  538,
      537,  539,  535,  625,  542,  536,  538,  541,  537,  539,
      535,  541,    0,  536,  538,    0,  543,  540,    0,  626,
      627,  628,  543,  535,  542,  540,  536,  538,  537,  539,
      535,  541,  542,  536,  538,  541,  543,  547,  544,  541,
      545,  546,    0,  549,  543,  540,  544,  626,  627,  628,

      543,  547,  542,  545,    0,    0,  546,  547,  544,  541,
      545,  546,    0,  549,  543,  547,  544,  548,  545,  546,
      548,  549,  630,  550,  544,  631,  551,  632,    0,  547,
      550,  545,  552,  553,  546,  547,  544,  553,  545,  546,
      548,  549,  551,  550,  554,  548,  551,  552,  548,  634,
      630,  550,  552,  631,  551,  632,  558,  553,  550,  556,
      552,  553,  635,  556,  554,  553,  557,  555,  548,  555,
      551,  550,  554,  557,  551,  552,  558,  634,  636,  556,
      552,    0,  559,    0,  558,  553,  557,  556,  560,  555,
      635,  556,  554,  559,  557,  555,  563,  555,  562,  560,

      563,  557,  559,  561,  558,  564,  636,  556,  560,  565,
      559,  567,  566,  562,  557,  567,  560,  555,  562,  561,
      563,  559,  569,  561,  563,  564,  562,  560,  563,  565,
      559,  561,  566,  564,  568,  567,  560,  565,  637,  567,
      566,  562,  569,  567,  571,  568,  562,  561,  563,  570,
      569,  561,  639,  564,  568,  572,    0,  565,  570,  574,
      566,  573,  568,  567,  571,  572,  637,    0,    0,  570,
      569,  575,  571,  568,  573,  572,  578,  570,  574,  574,
      639,  573,  568,  572,  575,  576,  570,  574,  577,  573,
      577,  575,  571,  572,  580,  581,  578,  570,  576,  575,

      582,  577,  573,  572,  578,  576,  574,  574,  577,  573,
      579,  640,  575,  576,  580,  581,  577,  579,  577,  575,
      582,  584,  580,  581,  578,    0,  576,  585,  582,  577,
      579,  583,  586,  576,  585,    0,  577,  589,  579,  640,
        0,  584,  580,  581,  641,  579,  583,  585,  582,  584,
      587,  583,  586,  588,  590,  585,  590,  589,  579,  583,
      586,    0,  585,  591,  587,  589,  588,    0,  595,  584,
      587,    0,  641,  588,  583,  585,  590,  592,  587,  583,
      586,  588,  590,  591,  590,  589,  593,  594,  595,  596,
      592,  591,  587,  642,  588,  594,  595,  592,  587,  593,

      643,  588,  599,    0,  590,  592,  593,  594,  597,  596,
      599,  591,  597,  600,  593,  594,  595,  596,  592,    0,
      598,  642,  599,  594,  598,  592,  600,  593,  643,  644,
      599,  601,  597,  600,  593,  594,  597,  596,  599,  645,
      597,  600,  604,  605,  598,  602,  601,  603,  598,  603,
      599,  601,  598,  602,  600,    0,    0,  644,  607,  601,
      597,  600,  604,  605,  606,  602,  646,  645,  606,  603,
      604,  605,  598,  602,  601,  603,    0,  603,  607,  601,
      609,  602,    0,  613,  606,  608,  607,  610,  647,  612,
      604,  605,  606,  602,  646,  608,  606,  603,  612,  613,

      609,  610,  611,  613,  611,  608,  607,  610,  609,  612,
      614,  613,  606,  608,  614,  610,  647,  612,    0,  617,
      616,  615,  616,  608,  611,  619,  612,  613,  609,  610,
      611,  613,  611,  608,  614,  610,  615,  612,  614,  617,
      616,  615,  614,  618,    0,  619,  618,  617,  616,  615,
      616,  649,  611,  619,  650,  621,  620,  622,  651,  654,
      655,  656,  614,  618,  615,  657,  662,  617,  616,  615,
      663,  618,  620,  619,  618,  621,  620,  622,  664,  649,
      667,  668,  650,  621,  620,  622,  651,  654,  655,  656,
      669,  618,  670,  657,  662,  671,  673,  674,  663,  675,

      620,  676,  677,  621,  620,  622,  664,  678,  667,  668,
      679,  680,  682,  683,  684,  686,  687,  688,  669,    0,
      670,    0,    0,  671,  673,  674,  690,  675,  691,  676,
      677,  692,  757,  693,    0,  678,    0,  694,  679,  680,
      682,  683,  684,  686,  687,  688,  690,  696,  691,  695,
      695,  692,  692,  693,  690,    0,  691,  694,    0,  692,
      757,  693,  697,  698,  699,  694,  700,  696,    0,    0,
      695,  697,    0,  698,  690,  696,  691,  695,  695,  692,
      692,  693,  697,  698,  699,  694,  700,  702,    0,  701,
      697,  698,  699,  701,  700,  696,  703,  702,  695,  697,

      704,  698,  705,  703,    0,    0,  708,  702,  759,  709,
      697,  698,  699,  701,  700,  702,  703,  701,  706,    0,
      704,  701,  705,  707,  703,  702,  708,  710,  704,  709,
      705,  703,  707,  706,  708,  702,  759,  709,  706,  712,
      760,  701,  710,  707,  703,  761,  706,  710,  704,  711,
      705,  707,  713,  712,  708,  710,  713,  709,  714,  712,
      707,  706,  715,  762,  711,  714,  706,  712,  760,  711,
      710,  707,  713,  761,  716,  710,  716,  711,  714,  719,
      713,  712,  715,  717,  713,    0,  714,  712,  720,  722,
      715,  762,  711,  714,  716,  764,  717,  711,  718,  719,

      713,  723,  716,  717,  716,  721,  714,  719,  720,  722,
      715,  717,  724,  718,  725,  723,  720,  722,  718,  724,
      721,  723,  716,  764,  717,  721,  718,  719,    0,  723,
      726,  717,  724,  721,  725,  727,  720,  722,    0,  728,
      724,  718,  725,  723,    0,  732,  718,  724,  721,  723,
      726,  730,  729,  721,  730,  727,  729,  731,  726,  728,
      724,  733,  725,  727,    0,  732,  734,  728,    0,    0,
      737,  730,  731,  732,    0,  735,  729,  731,  726,  730,
      729,  733,  730,  727,  729,  731,  734,  728,  735,  733,
      737,  739,  738,  732,  734,  735,  738,  736,  737,  730,

      731,    0,  740,  735,  729,  731,  740,  741,  765,  733,
      736,  739,  738,    0,  734,    0,  735,  736,  737,  739,
      738,    0,  741,  735,  738,  736,  740,  741,  742,  742,
      740,  745,  744,    0,  740,  741,  765,  743,  736,  739,
      738,  743,  748,  746,  745,  736,  744,  749,  766,  742,
      741,  745,  744,    0,  740,  741,  742,  742,  746,  745,
      744,  743,  748,  746,  747,  743,  769,  749,  747,  743,
      748,  746,  745,  751,  744,  749,  766,  742,  752,  745,
      744,  750,  750,  753,  773,    0,  746,  756,  747,  743,
      748,  746,  747,  751,  769,  749,  747,  753,  752,  775,

      754,  751,  750,  753,  754,  778,  752,  756,  781,  750,
      750,  753,  773,  755,  782,  756,  747,  755,  784,  785,
      787,  751,  788,  789,  754,  753,  752,  775,  754,  791,
      750,  753,  754,  778,  792,  756,  781,  755,  795,  797,
      798,  755,  782,  799,  804,  755,  784,  785,  787,  805,
      788,  789,  754,  806,  807,  808,  809,  791,  860,    0,
      812,    0,  792,    0,  808,  755,  795,  797,  798,  861,
        0,  799,  804,  806,  807,  808,  809,  805,  811,  810,
      812,  806,  807,  808,  809,  811,  860,  814,  812,  814,
        0,  813,  808,  810,  816,    0,  817,  861,  811,  810,

      863,  806,  807,  808,  809,  813,  811,  810,  812,  814,
      815,  813,    0,  811,  816,  814,  817,  814,  818,  813,
      818,  810,  816,  819,  817,  815,  811,  810,  863,  820,
      815,    0,  821,  813,  822,  823,  824,  814,  815,  813,
      818,  825,  816,  819,  817,  824,  818,  826,  818,  820,
      827,  819,  821,  815,  822,  823,  824,  820,  815,  828,
      821,  825,  822,  823,  824,  829,    0,  826,  818,  825,
      827,  819,  831,  824,  868,  826,  832,  820,  827,  828,
      821,  830,  822,  823,  824,  829,  835,  828,  837,  825,
      833,  838,  831,  829,  830,  826,  832,  833,  827,  834,

      831,  830,  868,  834,  832,    0,  835,  828,  837,  830,
      833,  838,  839,  829,  835,  836,  837,  842,  833,  838,
      831,  843,  830,  834,  832,  833,  840,  834,  840,  830,
      836,  834,  839,  841,  835,  836,  837,  842,  833,  838,
      839,  843,    0,  836,  845,  842,  870,  841,  840,  843,
      844,  834,    0,  841,  840,  846,  840,  844,  836,  846,
      839,  841,  847,  836,  845,  842,  847,  871,  874,  843,
      844,  849,  845,  848,  870,  841,  840,  850,  844,  846,
      851,  841,  852,  846,  877,  844,  847,  846,  848,    0,
      847,  849,  845,  848,  847,  871,  874,  850,  844,  849,

      851,  848,  852,  878,  853,  850,  854,  846,  851,  879,
      852,  909,  877,  854,  847,  882,  848,  853,  883,  849,
      884,  848,  885,    0,  853,  850,  854,  886,  851,  887,
      852,  878,  853,  889,  854,  882,    0,  879,  883,  909,
      884,  854,  885,  882,  890,  853,  883,  886,  884,  887,
      885,  891,  853,  889,  854,  886,  888,  887,  892,  890,
      888,  889,  893,  882,  890,  894,  883,  895,  884,  895,
      885,  891,  890,    0,  896,  886,  910,  887,  892,  891,
      888,  889,  893,  897,  888,  894,  892,  890,  888,  895,
      893,    0,  890,  894,  896,  895,  897,  895,  898,  891,

      899,  900,  896,  897,  910,  902,  892,  912,  888,    0,
      893,  897,  901,  894,  903,    0,  914,  895,  898,  906,
      899,  900,  896,  904,  897,  902,  898,  901,  899,  900,
      905,  897,  901,  902,  903,  912,  904,  907,  905,  906,
      901,  908,  903,  904,  914,  916,  898,  906,  899,  900,
      905,  904,  917,  902,  919,  901,  921,  907,  905,    0,
      901,  908,  903,  923,  904,  907,  905,  906,  919,  908,
      930,  904,  920,  916,  919,  922,  921,  925,  905,  926,
      917,  924,  919,  923,  921,  907,  932,  920,  928,  908,
      922,  923,  920,  935,  924,  922,  919,  925,  930,  926,

      920,  924,  919,  922,  921,  925,  927,  926,  928,  924,
      936,  923,  937,  935,  932,  920,  928,  927,  922,  938,
      920,  935,  924,  922,  939,  925,  927,  926,  940,  924,
      936,  943,  937,  938,  927,  944,  928,    0,  936,  938,
      937,  935,    0,    0,  939,  927,    0,  938,  940,    0,
        0,  943,  939,    0,  927,  944,  940,    0,  936,  943,
      937,  938,    0,  944,    0,    0,    0,  938,    0,    0,
        0,    0,  939,    0,    0,    0,  940,    0,    0,  943,
        0,    0,    0,  944,  946,    0,    0,  946,  947,    0,
      947,  947,  949,    0,  949,  949,  950,    0,  950,  950,

      951,    0,  951,  951,  952,    0,  952,  952,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1640 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * _out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int _line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	{
#line 51 "flex_lexer.l"


#line 1927 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 946 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 945 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(DATABASES)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(CHECK)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(SUM)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(AVG)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(MIN)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(MAX)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 130:
#line 193 "flex_lexer.l"
case 131:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2681 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 946 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 946 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 945);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void hsql_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 224 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

